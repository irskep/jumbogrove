[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/example.js",
    "content": "// https://github.com/idmillington/undum/blob/master/docs/src/API.md\n// http://raconteur.readthedocs.io/en/latest/oneOf/\n// https://github.com/sequitur/improv\n// https://www.npmjs.com/package/markdown-it-attrs\n// https://www.npmjs.com/package/markdown-it-block-embed\n// https://www.npmjs.com/package/markdown-it-html5-embed\n// https://www.npmjs.com/package/markdown-it-html5-media\n// https://github.com/adam-p/markdown-it-smartarrows\n// https://www.npmjs.com/package/markdown-it-classy\n// https://www.npmjs.com/package/markdown-it-external-links\n// https://www.npmjs.com/package/markdown-it-strikethrough-alt\n// https://www.npmjs.com/package/markdown-it-replacements\nimport _ from 'lodash';\n\n/** @ignore */\nconst game = {\n    id: 'jg-example',\n    version: 1,\n    // initialSituation: 'demo', \n    navHeader: `\n    # Example game\n\n    An example game for Jumbo Grove by Steve Johnson\n    `,\n    asideHeader: `\n    # Characters\n    `,\n    globalState: {\n        aliensHaveInvaded: false,\n    },\n    willEnter: (model, ui, oldSituationId, newSituationId) => {\n        if (oldSituationId) {\n            ui.writeHTML('<hr>');\n        }\n        return true;\n    },\n    init(model, ui, md) {\n        // configure markdown here!\n    },\n};\n\ngame.characters = [\n    {\n        id: 'player',\n        name: 'Bob',\n        description: 'It is you',\n        showInSidebar: true,\n        priority: 0,\n        qualities: {\n            util: {\n                hidden: true,\n            },\n            attributes: {\n                name: 'Attributes',\n                priority: 0,\n                hair: {\n                    type: 'onOff',\n                    name: \"widow's peak\",\n                    words: [\"no\", \"yes\"],\n                    priority: 0,\n                    initialValue: false,\n                },\n                stealthy: {\n                    type: 'flag',\n                    name: \"Stealthy\",\n                    priority: 1,\n                    initialValue: false,\n                }\n            },\n            states: {\n                name: 'States',\n                priority: 1,\n                hunger: {\n                    type: 'wordScale',\n                    name: 'Hunger',\n                    words: ['ravenous', 'hungry', 'neutral', 'sated', 'stuffed'],\n                    priority: 0,\n                    offset: 2,\n                    initialValue: 0,\n                },\n            },\n        },\n        state: {\n            inventory: [],\n        },\n    },\n];\ngame.situations = [];\n\ngame.situations.push({\n    id: 'start',\n    optionText: 'Play the Bob Game',\n    content: `\n    ## The Bob Game\n\n    [Read more about Bob](>write:aboutBob)\n\n    [Change favorite color](>replace:favoriteColor)\n\n    [What am I?](>replaceself:teapot)\n\n    Favorite color: **red**{#favoriteColor}\n\n    [Test](>test)\n    `,\n    choices: ['longboye', 'demo', 'hello'],\n    actions: {\n        test: (...args) => {\n            console.log('test', ...args);\n        },\n    },\n    snippets: {\n        aboutBob: `\n            Bob is a nice guy. You should get to know him.\n        `,\n        favoriteColor: `[blue](>replaceself:teapot)`,\n        teapot: \"I'm a teapot!\",\n    },\n});\n\ngame.situations.push({\n    id: 'demo',\n    optionText: 'Go back to start',\n    content: `\n        <% if (model.currentSituation.totalVisits > 0) { %>\n        You have visited <%- model.currentSituation.totalVisits %> times.\n        <% } else { %>\n        What is your [name](>bob)?\n        <% } %>\n\n        Name presents: <%- listWithAction('name', 'or', 'Andy', 'Kevin', 'Steve') %>\n    `,\n    enter: (model, ui, fromSituation) => {\n        ui.promptInput({placeholder: 'Enter your name'})\n            .then((name) => { \n                model.player.name = name;\n                model.goTo('hello')\n            });\n    },\n    actions: {\n        name: (model, ui, value) => {\n            console.log(value);\n        },\n        bob: (model, ui) => {\n            model.player.name = 'Bob';\n            model.goTo('hello');\n        },\n    }\n});\n\ngame.situations.push({\n    id: 'hello',\n    content: `\n        **You made your first choice**\n\n        Howdy, <%- model.player.name %>!\n\n        <%- ifThen(player.name === 'Bob', 'favoritism', 'pessimism') %>\n    `,\n    choices: ['start', 'longboye'],\n    snippets: {\n        favoritism: \"I like you best.\\n\\n\",\n        pessimism: \"You're...alright, I guess.\\n\\n\",\n    },\n});\n\ngame.situations.push({\n    id: 'longboye',\n    content: _.range(0, 100).map(() => '|').join('\\n\\n'),\n    choices: ['start', 'demo', 'hello']\n});\nexport default game;\n",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/example.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "game",
    "memberof": "src/example.js",
    "static": true,
    "longname": "src/example.js~game",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/example.js",
    "importStyle": "game",
    "description": null,
    "lineNumber": 16,
    "ignore": true,
    "type": {
      "types": [
        "{\"id\": string, \"version\": number, \"navHeader\": *, \"asideHeader\": *, \"globalState\": *, \"willEnter\": *, \"init\": function}"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/example2.js",
    "content": "export default {\n    id: 'my-game',\n    navHeader: `\n        # My Game\n\n        This text appears in the left sidebar.\n    `,\n    asideHeader: `\n        # Stats\n\n        This text appears in the right sidebar.\n    `,\n    globalState: {\n        foo: 'bar',  // you may put anything JSON-safe in here\n    },\n    characters: [\n        // this section is a work in progress\n    ],\n    situations: [\n        /*\n        This is where the meat of the library is.\n\n        A \"situation\" can be thought of as a room, a section, or\n        some other conceptual unit. It has:\n\n        * Markdown text displayed when you enter\n        * \"snippets\" which can be inserted based on the user\n            clicking links\n        * \"choices\" which are automatically displayed after the text\n        * JavaScript callbacks for all kinds of things\n        * So much more, but I haven't had time to write docs yet\n\n        */\n        {\n            id: 'start',  // first situation\n            content: `\n                # Welcome to Jumbo Grove\n\n                [Normal links](https://google.com) work normally.\n\n                [Links with an @](@frog) transition to another situation.\n\n                [Links with a >](>debug_log) run an \"action\" within the\n                situation. You can provide arguments to the action function\n                using [colon separators](>debug_log:whats:up).\n            `,\n            actions: {\n                debug_log: (...args) => { console.log(\"HELLO!\", ...args); },\n            },\n            choices: ['snippets_demo', 'state_demo'],\n            // if this situation shows up in another choices array,\n            // use this text:\n            optionText: 'Go back to start',\n        },\n\n        {\n            id: 'frog',\n            optionText: 'Look at the cool frog',\n            content: `\n                There is a cool frog sitting on a stump.\n            `,\n            choices: ['start'],\n        },\n\n        {\n            id: 'snippets_demo',\n            optionText: 'Snippets demo',\n            choices: ['start', 'state_demo'],\n            content: `\n                There are a few built-in special actions.\n\n                1. \\`write\\` appends the snippet contents to the end of the\n                    current section. [Try it](>write:poem)\n                2. \\`replace\\` replaces the HTML element with the same ID as the\n                    snippet, with the contents of the snippet. [Try it](>replace:ghost)\n\n                    _This text will be replaced_{#ghost}\n                3. \\`replaceself\\` replaces the clicked link with the contents of\n                    the snippet. [Try it](>replaceself:robot)\n            `,\n            snippets: {\n                poem: `\n                    ### A poem\n\n                    > Higgledy-piggledy Emily Dickinson  \n                    > Liked to use dashes instead of full stops.  \n                    > Nowadays, faced with such idiosyncrasies,  \n                    > Critics and editors run for the cops.  \n                `,\n                ghost: '**BOO!**',\n                robot: \"Beep boop I'm a robot\",\n            },\n        },\n\n        {\n            id: 'state_demo',\n            optionText: 'State demo',\n            choices: ['start', 'snippets_demo'],\n            content: `\n            This section is not yet finished.\n            `\n        },\n    ],\n};",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/example2.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/jg/character.js",
    "content": "import _ from 'lodash';\nimport qualities from \"./qualities/index\";\n\nconst _prioritySort = ({priority}) => -priority || 0;\nconst _groupOmitKeys = ['id', 'name', 'priority', 'hidden'];\n\n/**\n * This class is created from the character object you specify in your game.\n */\nexport default class Character {\n    /**\n     * \n     * @param {object} args \n     * @param {string} args.id\n     * @param {string} args.name\n     * @param {number} args.priority\n     * @param {Boolean} args.showInSidebar\n     * @param {string|function(): string} args.description Currently unused\n     * @param {quality[]} args.qualities\n     * @param {*} args.state Initial value of {@link state}\n     */\n    constructor({qualities, id, name, priority = 0, showInSidebar = true, description = '', state = {}}) {\n        /**\n         * The ID you specified for this character. Must be unique across all characters.\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * The name you specified for this character.\n         * @type {string}\n         */\n        this.name = name;\n\n        /**\n         * Arbitrary, JSON-safe data about this character. You may update it any time you want.\n         * @type {*}\n         */\n        this.state = _.cloneDeep(state); \n\n        Object.assign(this, {qualities, description, showInSidebar, priority});\n\n        this.updateQualities()\n    }\n\n    /** @ignore */\n    updateQualities() {\n        this._shallowQualities = {};\n        Object.keys(this.qualities).forEach((k) => {\n            const group = this.qualities[k];\n            group.id = k;\n            for (const k2 of _.keys(_.omit(group, _groupOmitKeys))) {\n                if (this._shallowQualities[k2]) {\n                    throw Error(\"You have two qualities with the same ID. Please don't do that.\")\n                }\n                group[k2].id = k2;\n                this._shallowQualities[k2] = group[k2];\n                if (group[k2].value === undefined) group[k2].value = group[k2].initialValue;\n            }\n        });\n        /** @ignore */\n        this.sortedQualityGroups = _.sortBy(Object.values(this.qualities), _prioritySort);\n    }\n\n    /** @ignore */\n    toSave() {\n        return _.pick(this, ['id', 'qualities', 'name', 'showInSidebar', 'description', 'state']);\n    }\n\n    /** @ignore */\n    loadSave(obj) {\n        _.assign(this, obj);\n        this.updateQualities();\n    }\n\n    /** @ignore */\n    getDescription() {\n        if (_.isFunction(this.description)) {\n            return this.description.apply(this, arguments);\n        } else {\n            return this.description || this.id;\n        }\n    }\n\n    /** @ignore */\n    sortedQualities(groupName) {\n        return _.sortBy(Object.values(_.omit(this.qualities[groupName], _groupOmitKeys)), _prioritySort);\n    }\n\n    /**\n     * Return the current value of this quality (without formatting it)\n     * \n     * @param {string} id ID of the quality whose value you want\n     * @returns {*}\n     */\n    getQuality(id) {\n        return this._shallowQualities[id].value;\n    }\n\n    /**\n     * Return the _initial_ value of this quality from the start of the game(without formatting it).\n     * You can use this to see how the value has changed since the start of the game.\n     * \n     * @param {string} id ID of the quality whose value you want\n     * @returns {*}\n     */\n    getQualityInitial(id) {\n        return this._shallowQualities[id].initialValue;\n    }\n\n    /**\n     * Returns the formatted value of the given quality.\n     * \n     * @param {string} id ID of the quality whose value you want\n     * @returns {string}\n     */\n    formatQuality(id) {\n        const quality = this._shallowQualities[id];\n        if (!qualities[quality.type]) {\n            console.error(\"Undefined quality type:\", quality.type);\n            return '';\n        }\n        return qualities[quality.type].format(this, quality, quality.value);\n    }\n\n    /**\n     * Return the human-readable name for the given quality ID.\n     * \n     * @param {string} id ID of the quality whose value you want\n     * @returns {string}\n     */\n    formatQualityName(id) {\n        const quality = this._shallowQualities[id];\n        return quality.name;\n    }\n\n    /**\n     * Qualities **must** be modified using this method.\n     * \n     * @param {string} id ID of the quality to modify on this character\n     * @param {*} value New value for the quality\n     */\n    setQuality(id, value) {\n        this._shallowQualities[id].value = value;\n    }\n\n    /**\n     * Add an integer value to the given quality.\n     * \n     * @param {string} id ID of the quality to modify on this character\n     * @param {number} value Amount to add\n     * @returns {number} The new value\n     */\n    addToQuality(id, delta) {\n        return this._shallowQualities[id].value += delta;\n    }\n}",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/character.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "_prioritySort",
    "memberof": "src/jg/character.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/character.js~_prioritySort",
    "access": "private",
    "export": false,
    "importPath": "jumbogrove/src/jg/character.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"priority\": *}"
        ],
        "defaultRaw": {
          "priority": null
        },
        "defaultValue": "{\"priority\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "_groupOmitKeys",
    "memberof": "src/jg/character.js",
    "static": true,
    "longname": "src/jg/character.js~_groupOmitKeys",
    "access": "private",
    "export": false,
    "importPath": "jumbogrove/src/jg/character.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "Character",
    "memberof": "src/jg/character.js",
    "static": true,
    "longname": "src/jg/character.js~Character",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/character.js",
    "importStyle": "Character",
    "description": "This class is created from the character object you specify in your game.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 55,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "args.priority",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.showInSidebar",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string",
          "function(): string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.description",
        "description": "Currently unused"
      },
      {
        "nullable": null,
        "types": [
          "quality[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args.qualities",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args.state",
        "description": "Initial value of {@link state}"
      }
    ]
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "id",
    "memberof": "src/jg/character.js~Character",
    "static": false,
    "longname": "src/jg/character.js~Character#id",
    "access": "public",
    "description": "The ID you specified for this character. Must be unique across all characters.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "name",
    "memberof": "src/jg/character.js~Character",
    "static": false,
    "longname": "src/jg/character.js~Character#name",
    "access": "public",
    "description": "The name you specified for this character.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "state",
    "memberof": "src/jg/character.js~Character",
    "static": false,
    "longname": "src/jg/character.js~Character#state",
    "access": "public",
    "description": "Arbitrary, JSON-safe data about this character. You may update it any time you want.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "updateQualities",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#updateQualities",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_shallowQualities",
    "memberof": "src/jg/character.js~Character",
    "static": false,
    "longname": "src/jg/character.js~Character#_shallowQualities",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "sortedQualityGroups",
    "memberof": "src/jg/character.js~Character",
    "static": false,
    "longname": "src/jg/character.js~Character#sortedQualityGroups",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "toSave",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#toSave",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "loadSave",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#loadSave",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "getDescription",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#getDescription",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "sortedQualities",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#sortedQualities",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "ignore": true,
    "params": [
      {
        "name": "groupName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "getQuality",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#getQuality",
    "access": "public",
    "description": "Return the current value of this quality (without formatting it)",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of the quality whose value you want"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "getQualityInitial",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#getQualityInitial",
    "access": "public",
    "description": "Return the _initial_ value of this quality from the start of the game(without formatting it).\nYou can use this to see how the value has changed since the start of the game.",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of the quality whose value you want"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "formatQuality",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#formatQuality",
    "access": "public",
    "description": "Returns the formatted value of the given quality.",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of the quality whose value you want"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "formatQualityName",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#formatQualityName",
    "access": "public",
    "description": "Return the human-readable name for the given quality ID.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of the quality whose value you want"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "setQuality",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#setQuality",
    "access": "public",
    "description": "Qualities **must** be modified using this method.",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of the quality to modify on this character"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "New value for the quality"
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "addToQuality",
    "memberof": "src/jg/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/character.js~Character#addToQuality",
    "access": "public",
    "description": "Add an integer value to the given quality.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The new value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of the quality to modify on this character"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Amount to add"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The new value"
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/jg/commands.js",
    "content": "export default {\n  runAction: {\n    name: 'runAction',\n    create: (name, args) => {\n      return {'type': 'runAction', name, args};\n    },\n  },\n  write: {\n    name: 'write',\n    create: (itemId, snippetId) => {\n      return {'type': 'write', itemId, snippetId};\n    },\n  },\n  replace: {\n    name: 'replace',\n    create: (itemId, snippetId, elId) => {\n      return {'type': 'replace', itemId, snippetId, elId};\n    },\n  },\n  goToSituation: {\n    name: 'goToSituation',\n    create: (id) => {\n      return {'type': 'goToSituation', id};\n    },\n  },\n  resetGame: {\n    name: 'resetGame',\n    create: () => ({'type': 'resetGame'}),\n  },\n};",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/commands.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/jg/dataui.js",
    "content": "import _ from 'lodash';\nimport MarkdownIt from 'markdown-it';\nimport MarkdownItAttrs from 'markdown-it-attrs';\nimport nunjucks from 'nunjucks';\n\n/**\n * @external {MarkdownIt} https://github.com/markdown-it/markdown-it\n */\n\n /** @ignore */\nfunction normalizeIndent(text) {\n  if (!text) return text;\n\n  var lines = _.trimEnd(text).split('\\n');\n  var indents = lines\n    .filter((l) => l !== '') // Ignore empty lines\n    .map((l) => l.match(/^\\s+/))\n    .map(function (m) {\n      if (m === null) return '';\n      return m[0];\n    });\n  if (!indents.length) return text;\n  var smallestIndent = indents.reduce(function(max, curr) {\n    if (curr.length < max.length) return curr;\n    return max;\n  }); // Find the \"bottom\" indentation level\n  return lines.map(function (l) {\n    return l.replace(new RegExp('^' + smallestIndent), '');\n  }).join('\\n');\n}\n\n/**\n * Direct access to the HTML transcript.\n */\nexport default class ui {\n  /** @ignore */\n  constructor() {\n    /** @ignore */\n    this.content = [];\n    /** @ignore */\n    this.currentItemId = null;\n    /** @ignore */\n    this.currentGroupId = 0;\n    /** @ignore */\n    this.nextItemId = 0;\n    /** @ignore */\n    this.templateHelperGetters = {};\n\n    /**\n     * {@link MarkdownIt} instance used to render Markdown. You may use it\n     * to register additional plugins.\n     * @type {MarkdownIt}\n     */\n    this.md = new MarkdownIt({html: true, linkify: false, typographer: true});\n    this.md.use(MarkdownItAttrs);\n\n    /**\n     * {@link nunjucks} instance used to render templates. You may use it\n     * to add custom tags, filters, or globals. (See [the \"Environment\" section\n     * of this page.](https://mozilla.github.io/nunjucks/api.html))\n     */\n    this.nunjucks = new nunjucks.Environment([], {\n      autoescape: false,\n      tags: {\n        commentStart: '{##',\n        commentEnd: '##}',\n      },\n    });\n\n    this.nunjucks.addFilter('qualityName', (char, q) => {\n      return char.formatQualityName(q);\n    });\n\n    this.nunjucks.addFilter('quality', (char, q) => {\n      return char.formatQuality(q);\n    });\n\n    /**\n     * You may replace this property if you want to use a template\n     * language other than [Nunjucks](https://mozilla.github.io/nunjucks/).\n     * \n     * It is a function that takes a string and returns a function that takes\n     * attrs and returns a rendered string. Like this:\n     * \n     * ```\n     * (src) => (attrs) => render(src, attrs)\n     * ```\n     * @param {function(src: string): function} src \n     */\n    this.createTemplate = (src) => (attrs) => {\n      return this.nunjucks.renderString(src, attrs);\n    };\n\n    /** @ignore */\n    this.templateHelperFunctions = {};\n  }\n\n  /**\n   * Make the given objects or values available to the template context.\n   * @param {Map<string, function>} fns \n   */\n  addTemplateContext(fns) {\n    this.templateHelperFunctions = {...this.templateHelperFunctions, ...fns};\n  }\n\n  /**\n   * Whenever a template is rendered, evaluate all these functions and make their\n   * return values available to the template context.\n   * \n   * **All template getters are called whenever you render any template.**\n   * \n   * @example\n   * \n   * // If you add a getter like this:\n   * jumbogrove.jumbogrove('#game', {\n   *   init: (model, ui) => {\n   *     ui.addTemplateGetters({\n   *       randomNumber: () => Math.random()\n   *     });\n   *   }\n   * });\n   * \n   * // Then you may use it in a template like this:\n   * \n   * `\n   * {{ randomNumber }}\n   * `\n   * \n   * // and it will show the function's return value (in this case, a random\n   * // number 0-1).\n   * \n   * @param {Map<string, function>} fns \n   */\n  addTemplateGetters(fns) {\n    this.templateHelperGetters = {...this.templateHelperGetters, ...fns};\n  }\n\n  /** @ignore */\n  bind(director) {\n    this.director = director;\n  }\n\n  /** @ignore */\n  templateContext() {\n    const getters = {};\n    for (const k of Object.keys(this.templateHelperGetters)) {\n      getters[k] = this.templateHelperGetters[k]();\n    }\n    return {\n      ...this.director.model.globalState,\n      ...this.director.model,\n      ...getters,\n      ...this.templateHelperFunctions,\n      model: this.director.model,\n      ui: this,\n    };\n  }\n\n  /**\n   * Render the given Markdown text to HTML. Automatically dedents the text to the \n   * minimum indent level.\n   * @param {string} text \n   * @param {Boolean} inline If true, do not parse any block-level markup or wrap in a paragraph.\n   */\n  renderMarkdown(text, inline = false) {\n    if (inline) {\n      // console.log('inline', text, '---', this.md.renderInline(normalizeIndent(text)))\n      return this.md.renderInline(normalizeIndent(text));\n    } else {\n      // console.log('div', text, '---', this.md.render(normalizeIndent(text)));\n      return this.md.render(normalizeIndent(text));\n    }\n  }\n\n  /**\n   * Process the text as a template and return the result.\n   * @param {string} src \n   * @param {Map<string,*>|null} args Additional template context\n   */\n  renderTemplate(src, args = null) {\n    try {\n      return this.createTemplate(src)({...args, ...this.templateContext()});\n    } catch (e) {\n      console.error(src)\n      throw e;\n    }\n  }\n\n  /**\n   * Process the text as a template, render the resulting Markdown to HTML, and\n   * return the result. Automatically dedents the text to the minimum indent level.\n   * @param {string} src \n   * @param {Map<string,*>} args Additional template context\n   * @param {Boolean} inline If true, do not parse any block-level markup or wrap in a paragraph.\n   */\n  renderMarkdownTemplate(src, args = null, inline = false) {\n    return this.renderMarkdown(this.renderTemplate(src, args), inline);\n  }\n\n  /**\n   * Like {@link renderMarkdownTemplate}, but automatically sets `inline` flag based on\n   * presence of line breaks.\n   * @param {string} src \n   * @param {Map<string,*>} args Additional template context\n   * @param {Boolean} inline If true, do not parse any block-level markup or wrap in a paragraph.\n   */\n  renderMarkdownTemplateMaybeInline(src, args = null) {\n    const inline = src.indexOf('\\n') === -1;\n    return this.renderMarkdownTemplate(src, args, inline);\n  }\n\n  /** @ignore */\n  nextGroup() {\n    this.currentGroupId += 1;\n  }\n\n  /** @ignore */\n  append(item) {\n    item.id = this.nextItemId;\n    this.nextItemId += 1;\n    item.groupId = this.currentGroupId;\n    this.content.push(item);\n    this.currentItemId = item.id;\n  }\n\n  /**\n   * Encode the given string so it doesn't mess up Markdown link parsing\n   * @param {String} s \n   * @ignore\n   */\n  encode(s) {\n    return window.encodeURIComponent;\n  }\n\n  /**\n   * Render the given HTML as a template and write it to the transcript.\n   * Links are automatically bound to actions and situation transitions.\n   * \n   * The output comes after ALL HTML in the current section, If you are\n   * presenting a choice, the HTML will be written BELOW the choice.\n   * @param {string} html \n   * @param {Map<string,*>} args Additional template contet\n   */\n  writeHTML(html, args = null) {\n    this.append({\n      'type': 'html',\n      html: this.renderTemplate(html, args),\n    });\n  }\n\n  /**\n   * Render the given string as a template, render the resulting Markdown as HTML, and\n   * write it to the transcript.\n   * \n   * The output comes after ALL HTML in the current section, If you are\n   * presenting a choice, the text will be written BELOW the choice.\n   * @param {string} markdown \n   * @param {Map<string,*>} args Additional template context\n   */\n  writeMarkdown(markdown, args = null) {\n    this.append({\n      'type': 'html',\n      html: this.renderMarkdownTemplate(markdown, args)});\n  }\n\n  /**\n   * Render the given HTML as a template and write it to the transcript\n   * WITHIN THE CURRENT SECTION. If you are writing HTML from inside\n   * an action function, this is probably what you want.\n   * \n   * @param {string} markdown \n   * @param {Map<string,*>} args Additional template context\n   */\n  write(markdown, args) {\n    if (this.director.activeItemId !== null) {\n      this.bus.$emit('write', {\n          'itemId': this.director.activeItemId,\n          'html': this.renderMarkdownTemplate(markdown, args),\n      });\n    } else {\n      this.writeMarkdown(markdown, args);\n    }\n  }\n\n  /**\n   * Remove all content from the transcript and start fresh.\n   */\n  clear() {\n    this.content = [];\n  }\n\n  /**\n   * Given an array of tags or situation IDs (can be both in the same array), present\n   * the relevant choices in the transcript using the logic in {@link model.interpretChoices}.\n   * @param {string[]} arrayOfSituationIdsOrTags Array of strings containing either `#tags` or `situation-ids`.\n   */\n  presentChoices(arrayOfSituationIdsOrTags) {\n    return new Promise((resolve, reject) => {\n      const item = {\n        'type': 'choice',\n        choices: this.director.model.interpretChoices(arrayOfSituationIdsOrTags),\n      };\n      item.callback = (situationId) => {\n        item.situationId = situationId;\n        resolve({situationId, itemId: item.id});\n      };\n      this.append(item);\n    });\n  }\n\n  /**\n   * Force the user to enter some text to continue.\n   * @param {Map<string,*>} options\n   * @param {string} options.placeholder Placeholder text for the input field\n   * @returns {Promise<string>}\n   */\n  promptInput({placeholder}) {\n    return new Promise((resolve, reject) => {\n      this.append({'type': 'input', placeholder, callback: resolve});\n    })\n  }\n}",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/dataui.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "MarkdownIt",
    "externalLink": "https://github.com/markdown-it/markdown-it",
    "memberof": "src/jg/dataui.js",
    "static": true,
    "longname": "src/jg/dataui.js~MarkdownIt",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "normalizeIndent",
    "memberof": "src/jg/dataui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/dataui.js~normalizeIndent",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/dataui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "ui",
    "memberof": "src/jg/dataui.js",
    "static": true,
    "longname": "src/jg/dataui.js~ui",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/dataui.js",
    "importStyle": "ui",
    "description": "Direct access to the HTML transcript.",
    "lineNumber": 35,
    "interface": false
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "content",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#content",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "currentItemId",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#currentItemId",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "currentGroupId",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#currentGroupId",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "nextItemId",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#nextItemId",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "templateHelperGetters",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#templateHelperGetters",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "md",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#md",
    "access": "public",
    "description": "{@link MarkdownIt} instance used to render Markdown. You may use it\nto register additional plugins.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "MarkdownIt"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "nunjucks",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#nunjucks",
    "access": "public",
    "description": "{@link nunjucks} instance used to render templates. You may use it\nto add custom tags, filters, or globals. (See [the \"Environment\" section\nof this page.](https://mozilla.github.io/nunjucks/api.html))",
    "lineNumber": 62,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "createTemplate",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#createTemplate",
    "access": "public",
    "description": "You may replace this property if you want to use a template\nlanguage other than [Nunjucks](https://mozilla.github.io/nunjucks/).\n\nIt is a function that takes a string and returns a function that takes\nattrs and returns a rendered string. Like this:\n\n```\n(src) => (attrs) => render(src, attrs)\n```",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(src: string): function"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "templateHelperFunctions",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#templateHelperFunctions",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "addTemplateContext",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#addTemplateContext",
    "access": "public",
    "description": "Make the given objects or values available to the template context.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<string, function>"
        ],
        "spread": false,
        "optional": false,
        "name": "fns",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "addTemplateGetters",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#addTemplateGetters",
    "access": "public",
    "description": "Whenever a template is rendered, evaluate all these functions and make their\nreturn values available to the template context.\n\n**All template getters are called whenever you render any template.**",
    "examples": [
      "\n// If you add a getter like this:\njumbogrove.jumbogrove('#game', {\n  init: (model, ui) => {\n    ui.addTemplateGetters({\n      randomNumber: () => Math.random()\n    });\n  }\n});\n\n// Then you may use it in a template like this:\n\n`\n{{ randomNumber }}\n`\n\n// and it will show the function's return value (in this case, a random\n// number 0-1)."
    ],
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<string, function>"
        ],
        "spread": false,
        "optional": false,
        "name": "fns",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "bind",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#bind",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "ignore": true,
    "params": [
      {
        "name": "director",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "director",
    "memberof": "src/jg/dataui.js~ui",
    "static": false,
    "longname": "src/jg/dataui.js~ui#director",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "templateContext",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#templateContext",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "{...undefined: Object, ...getters: Object, \"model\": *, \"ui\": *}"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "renderMarkdown",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#renderMarkdown",
    "access": "public",
    "description": "Render the given Markdown text to HTML. Automatically dedents the text to the \nminimum indent level.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "inline",
        "description": "If true, do not parse any block-level markup or wrap in a paragraph."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "renderTemplate",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#renderTemplate",
    "access": "public",
    "description": "Process the text as a template and return the result.",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Map<string,*>",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Additional template context"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "renderMarkdownTemplate",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#renderMarkdownTemplate",
    "access": "public",
    "description": "Process the text as a template, render the resulting Markdown to HTML, and\nreturn the result. Automatically dedents the text to the minimum indent level.",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Map<string,*>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Additional template context"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "inline",
        "description": "If true, do not parse any block-level markup or wrap in a paragraph."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "renderMarkdownTemplateMaybeInline",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#renderMarkdownTemplateMaybeInline",
    "access": "public",
    "description": "Like {@link renderMarkdownTemplate}, but automatically sets `inline` flag based on\npresence of line breaks.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Map<string,*>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Additional template context"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "inline",
        "description": "If true, do not parse any block-level markup or wrap in a paragraph."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "nextGroup",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#nextGroup",
    "access": "public",
    "description": null,
    "lineNumber": 213,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "append",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#append",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "ignore": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "encode",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#encode",
    "access": "public",
    "description": "Encode the given string so it doesn't mess up Markdown link parsing",
    "lineNumber": 231,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "writeHTML",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#writeHTML",
    "access": "public",
    "description": "Render the given HTML as a template and write it to the transcript.\nLinks are automatically bound to actions and situation transitions.\n\nThe output comes after ALL HTML in the current section, If you are\npresenting a choice, the HTML will be written BELOW the choice.",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Map<string,*>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Additional template contet"
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "writeMarkdown",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#writeMarkdown",
    "access": "public",
    "description": "Render the given string as a template, render the resulting Markdown as HTML, and\nwrite it to the transcript.\n\nThe output comes after ALL HTML in the current section, If you are\npresenting a choice, the text will be written BELOW the choice.",
    "lineNumber": 260,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "markdown",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Map<string,*>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Additional template context"
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "write",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#write",
    "access": "public",
    "description": "Render the given HTML as a template and write it to the transcript\nWITHIN THE CURRENT SECTION. If you are writing HTML from inside\nan action function, this is probably what you want.",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "markdown",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Map<string,*>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Additional template context"
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "clear",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#clear",
    "access": "public",
    "description": "Remove all content from the transcript and start fresh.",
    "lineNumber": 288,
    "params": [],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "presentChoices",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#presentChoices",
    "access": "public",
    "description": "Given an array of tags or situation IDs (can be both in the same array), present\nthe relevant choices in the transcript using the logic in {@link model.interpretChoices}.",
    "lineNumber": 297,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrayOfSituationIdsOrTags",
        "description": "Array of strings containing either `#tags` or `situation-ids`."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "promptInput",
    "memberof": "src/jg/dataui.js~ui",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/dataui.js~ui#promptInput",
    "access": "public",
    "description": "Force the user to enter some text to continue.",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<string,*>"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.placeholder",
        "description": "Placeholder text for the input field"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/jg/director.js",
    "content": "import _ from 'lodash';\nimport WorldModel from './model';\nimport commands from \"./commands\";\nimport { bindGamepad } from \"./gamepad\";\n\nconst getAnchors = () => {\n  return _.toArray(document.querySelectorAll('a'))\n    .filter((a) => !!a.attributes.href.value)\n    .filter((a) => !!a.offsetParent);\n};\n\nconst focus = (allAnchors, i) => {\n  const i2 = (i + allAnchors.length) % allAnchors.length;\n  allAnchors[i2].focus();\n};\n\nconst focusNextElement = () => {\n  const allAnchors = getAnchors();\n  if (!allAnchors.length) return;\n  const i = allAnchors.indexOf(document.activeElement);\n  if (i > -1) {\n    focus(allAnchors, i + 1);\n  } else {\n    allAnchors[0].focus();\n  }\n};\n\nconst focusPreviousElement = () => {\n  const allAnchors = getAnchors();\n  if (!allAnchors.length) return;\n  const i = allAnchors.indexOf(document.activeElement);\n  if (i > -1) {\n    focus(allAnchors, i - 1);\n  } else {\n    allAnchors[allAnchors.length - 1].focus();\n  }\n};\n\nconst nop = () => { };\n/** @ignore */\nclass JumboGroveDirector {\n    constructor({\n        id,\n        version = 1,\n        initialSituation = 'start', \n        navHeader = '',\n        asideHeader = '',\n        showNav = true,\n        showAside = true,\n        defaultStylesheet = true,\n        autoScroll = true,\n        autoMoveFocus = true,\n        globalState = {},\n        characters = [],\n        situations = [],\n        gameSaveMessage = null,\n        // (model, ui, markdown)\n        init = nop,\n        // Return falsey value if you want to abort the new situation\n        // (model, ui, previousId, nextId)\n        willEnter = () => true,\n        // (model, ui, previousId, nextId)\n        didEnter = nop,\n        // (model, ui, thisId, nextId)\n        willExit = nop,\n        // (model, ui, thisId, nextId)\n        didExit = nop,\n        // (model, ui, situation, action)\n        willAct = nop,\n        // (model, ui, situation, action)\n        didAct = nop,\n    }) {\n        if (!id) throw new Error(\"You must provide an id\"); \n        Object.assign(this, {\n            id, willEnter, didEnter, willExit, didExit, willAct, didAct,\n            navHeader, asideHeader, init, showNav, showAside,\n            defaultStylesheet, autoScroll, autoMoveFocus, gameSaveMessage,\n        });\n        this.modelArgs = {characters, globalState, situations, initialSituation, version};\n\n        this.activeItemId = null;\n\n        this.recreateModel();\n        this.interactive = true;\n    }\n\n    recreateModel() {\n        this.model = new WorldModel(this, this.modelArgs);\n    }\n\n    toString() {\n        return `Director(id=${this.id})`;\n    }\n\n    bindToUI(ui) {\n        const wasBound = !!this.ui;\n        this.ui = ui;\n        ui.bind(this);\n        this.model.navHeaderHTML = ui.renderMarkdown(this.navHeader);\n        this.model.asideHeaderHTML = () => {\n            return ui.renderMarkdownTemplate(this.asideHeader);\n        }\n        this.init(this.model, this.ui, wasBound);\n    }\n\n    start() {\n        if (this.model.currentSituation) {\n            return;  // vue.js is hot-reloading us\n        }\n        if (!this.load()) {\n            this.goTo(this.model._initialSituationId);\n        }\n        bindGamepad(this);\n    }\n\n    save(toSituationId) {\n        const saveId = `${this.id}-${this.version}`; \n        localStorage[saveId] = JSON.stringify({toSituationId, model: this.model.toSave()});\n    }\n    \n    load() {\n        const saveId = `${this.id}-${this.version}`; \n        if (!localStorage[saveId]) return false;\n        let json = null;\n        try {\n            json = JSON.parse(localStorage[saveId]);\n        } catch (e) {\n            return false;\n        }\n        if (!json.model) return false;\n        if (!json.toSituationId) return false;\n\n        try {\n            this.model.loadSave(json.model);\n            this.goTo(json.toSituationId, true);\n        } catch (e) {\n            delete localStorage[saveId];\n            this.recreateModel();\n            this.start();\n            return false;\n        }\n        return true;\n    }\n\n    isManagedLink(href) {\n        return commandsFromString(href).length > 0;\n    }\n\n    getSnippetWrapperTag(id) {\n        if (!this.model.currentSituation.snippets[id]) {\n            throw new Error(`Snippet ${this.model.currentSituation.id}.${id} doesn't exist`);\n        }\n        return this.model.currentSituation.snippets[id].indexOf('\\n') === -1 ? 'span' : 'div';\n    }\n\n    getSnippetHTML(id) {\n        if (!this.model.currentSituation.snippets[id]) {\n            throw new Error(`Snippet ${this.model.currentSituation.id}.${id} doesn't exist`);\n        }\n        return this.ui.renderMarkdownTemplateMaybeInline(\n            this.model.currentSituation.snippets[id]);\n    }\n\n    getSnippet(id) {\n        if (!this.model.currentSituation.snippets[id]) {\n            throw new Error(`Snippet ${this.model.currentSituation.id}.${id} doesn't exist`);\n        }\n        return this.ui.renderTemplate(this.model.currentSituation.snippets[id]);\n    }\n\n    handleCommandString(s, itemId = null, sourceElId = null) {\n        let restore = false;\n        if (itemId !== null) {\n            restore = true;\n            this.activeItemId = itemId;\n            this.activeSourceElId = sourceElId;\n        }\n        for (const cmd of commandsFromString(s, this.activeItemId, this.activeSourceElId)) {\n            this.handleCommand(cmd);\n        }\n        if (restore) {\n            this.activeItemId = null;\n            this.activeSourceElId = null;\n        }\n    }\n\n    handleCommand(cmd) {\n        switch (cmd.type) {\n        case commands.runAction.name:\n            this.runAction(cmd.name, cmd.args);\n            break;\n        case commands.goToSituation.name:\n            this.goTo(cmd.id);\n            break;\n        case commands.write.name:\n            this.performWrite(cmd);\n            break;\n        case commands.replace.name:\n            this.performReplace(cmd);\n            break;\n        case commands.resetGame.name:\n            this.performResetGame(cmd);\n            break;\n        default:\n            throw new Error(\"Unknown command: \" + cmd);\n        }\n    }\n\n    performWrite({itemId, snippetId}) {\n        this.ui.bus.$emit('write', {\n            'itemId': itemId,\n            'html': this.getSnippetHTML(snippetId),\n        });\n    }\n\n    performReplace({itemId, snippetId, elId}) {\n        this.ui.bus.$emit('replace', {\n            'itemId': itemId,\n            'id': elId,\n            'tag': this.getSnippetWrapperTag(snippetId),\n            'html': this.getSnippetHTML(snippetId),\n        });\n    }\n\n    runAction(name, args) {\n        this.willAct(this.model, this.ui, this.model.currentSituation, name, ...args);\n        this.model.currentSituation.doAct(this.model, this.ui, name, ...args);\n        this.didAct(this.model, this.ui, this.model.currentSituation, name, ...args);\n    }\n\n    performResetGame() {\n        const saveId = `${this.id}-${this.version}`; \n        delete localStorage[saveId];\n        location.reload();\n    }\n\n    goTo(id, isFromLoad = false) {\n        const next = this.model.situation(id);\n        const previous = this.model.currentSituation;\n        const previousId = previous ? previous.id : null;\n        if (next.autosave && !isFromLoad) {\n            this.save(id);\n            if (this.gameSaveMessage) {\n                this.ui.writeMarkdown(this.gameSaveMessage);\n            }\n        }\n        if (this.model.currentSituation) {\n            this.willExit(this.model, this.ui, previousId, id);\n            this.model.currentSituation.doExit(this.model, this.ui, next);\n            this.didExit(this.model, this.ui, previousId, id);\n        }\n        this.model.currentSituation = null;\n\n        // willEnter() may redirect us\n        if (!this.willEnter(this.model, this.ui, previousId, id)) {\n            return;\n        }\n        if (!next.willEnter(this.model, this.ui, previousId, id)) {\n            return;\n        }\n\n        this.model.currentSituation = next;\n        next.doEnter(this.model, this.ui, this, previous);\n        this.didEnter(this.model, this.ui, previousId, id);\n    }\n\n    focusNextElement() { if (this.autoMoveFocus) focusNextElement(); }\n    focusPreviousElement() { if (this.autoMoveFocus) focusPreviousElement(); }\n}\n\nfunction parseAction(s) {\n    return s.split(':');\n}\n\nfunction commandsFromString(str, itemId = null, elId = null) {\n    str = window.decodeURIComponent(str);\n    return str.split(';')\n        .map((s) => {\n            if (s.startsWith('@')) {\n                return commands.goToSituation.create(s.slice(1))\n            }\n            if (s.startsWith('>')) {\n                const nameAndArgs = parseAction(s.slice(1));\n                const name = nameAndArgs[0];\n                const args = _.tail(nameAndArgs);\n                switch (name.toLowerCase()) {\n                case 'write': return commands.write.create(itemId, args[0]);\n                case 'replace': return commands.replace.create(itemId, args[0], args[0]);\n                case 'replaceself': return commands.replace.create(itemId, args[0], elId);\n                case 'resetgame': return commands.resetGame.create();\n                default: return commands.runAction.create(name, args);\n                }\n            }\n            return null;\n        })\n        .filter((cmd) => cmd !== null);\n}\n\nexport default JumboGroveDirector;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/director.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "getAnchors",
    "memberof": "src/jg/director.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/director.js~getAnchors",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/director.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "focus",
    "memberof": "src/jg/director.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/director.js~focus",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/director.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "allAnchors",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "focusNextElement",
    "memberof": "src/jg/director.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/director.js~focusNextElement",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/director.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "focusPreviousElement",
    "memberof": "src/jg/director.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/director.js~focusPreviousElement",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/director.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "nop",
    "memberof": "src/jg/director.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/director.js~nop",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/director.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "parseAction",
    "memberof": "src/jg/director.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/director.js~parseAction",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/director.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "commandsFromString",
    "memberof": "src/jg/director.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/director.js~commandsFromString",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/director.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "itemId",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "elId",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "JumboGroveDirector",
    "memberof": "src/jg/director.js",
    "static": true,
    "longname": "src/jg/director.js~JumboGroveDirector",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/director.js",
    "importStyle": "JumboGroveDirector",
    "description": null,
    "lineNumber": 41,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 120,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "modelArgs",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#modelArgs",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "{\"characters\": *, \"globalState\": *, \"situations\": *, \"initialSituation\": *, \"version\": *}"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "activeItemId",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#activeItemId",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "interactive",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#interactive",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "recreateModel",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#recreateModel",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "model",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#model",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "toString",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#toString",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "bindToUI",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#bindToUI",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "ui",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "ui",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#ui",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "start",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#start",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "save",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#save",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "toSituationId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "load",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#load",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "isManagedLink",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#isManagedLink",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "href",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "getSnippetWrapperTag",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#getSnippetWrapperTag",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "getSnippetHTML",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#getSnippetHTML",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "getSnippet",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#getSnippet",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "handleCommandString",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#handleCommandString",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "itemId",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "sourceElId",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "activeSourceElId",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#activeSourceElId",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "handleCommand",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#handleCommand",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "cmd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "performWrite",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#performWrite",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"itemId\": *, \"snippetId\": *}"
        ],
        "defaultRaw": {
          "itemId": null,
          "snippetId": null
        },
        "defaultValue": "{\"itemId\":null,\"snippetId\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "performReplace",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#performReplace",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"itemId\": *, \"snippetId\": *, \"elId\": *}"
        ],
        "defaultRaw": {
          "itemId": null,
          "snippetId": null,
          "elId": null
        },
        "defaultValue": "{\"itemId\":null,\"snippetId\":null,\"elId\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "runAction",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#runAction",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "performResetGame",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#performResetGame",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "goTo",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#goTo",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "isFromLoad",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "focusNextElement",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#focusNextElement",
    "access": "public",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "focusPreviousElement",
    "memberof": "src/jg/director.js~JumboGroveDirector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/director.js~JumboGroveDirector#focusPreviousElement",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/jg/gameformat/character.js",
    "content": "/**\n * An entry in the `game.characters` array.\n * \n * The format of this object matches the constructor of {@link Character#constructor}.\n */\nclass character {\n};\nexport default character;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/gameformat/character.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "character",
    "memberof": "src/jg/gameformat/character.js",
    "static": true,
    "longname": "src/jg/gameformat/character.js~character",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/gameformat/character.js",
    "importStyle": "character",
    "description": "An entry in the `game.characters` array.\n\nThe format of this object matches the constructor of {@link Character#constructor}.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/jg/gameformat/game.js",
    "content": "/**\n * The object you pass to the {@link jumbogrove} function.\n * \n * @example\n * const game = {\n *     id: 'jg-example',\n *     version: 1,\n *     globalState: {\n *         aliensHaveInvaded: false,\n *     },\n *     willEnter: (model, ui, previousId, nextId) => {\n *         console.log(\"Transitioning from\", previousId, \"to\", nextId);\n *     },\n * };\n * jumbogrove('#app', game);\n */\nclass game {\n    /** @ignore */\n    constructor() {\n        /**\n         * An ID unique to your game. Used to determine save location.\n         * @type {string}\n         */\n        this.id = null;\n\n        /**\n         * The current version of your game. Used to determine save location.\n         * @type {number}\n         */\n        this.version = null;\n\n        /**\n         * The ID of the first situation you want to show the player.\n         * @type {string}\n         */\n        this.initialSituation = 'start';\n\n        /**\n         * If you set this to `false`, the left sidebar will not be shown.\n         * Default `true`.\n         * @type {Boolean}\n         */\n        this.showNav = true;\n\n        /**\n         * If you set this to `false`, the right sidebar will not be shown.\n         * Default `true`.\n         * @type {Boolean}\n         */\n        this.showAside = true;\n\n        /**\n         * If you set this to `false`, fewer styles will be applied to\n         * the HTML.\n         * Default `true`.\n         * @type {Boolean}\n         */\n        this.defaultStylesheet = true;\n\n        /**\n         * If you set this to `false`, the browser will not scroll as new text\n         * is added.\n         * Default `true`.\n         * @type {Boolean}\n         */\n        this.autoScroll = true;\n\n        /**\n         * The Markdown string you want to show at the top of the left sidebar.\n         * @type {string}\n         */\n        this.navHeader = '';\n\n        /**\n         * The Markdown string you want to show at the top of the right sidebar.\n         * This string is processed by the template engine before being displayed.\n         * @type {string}\n         */\n        this.asideHeader = '';\n\n        /**\n         * The Markdown string you want to show whenever the game is saved.\n         * @type {string}\n         */\n        this.gameSaveMessage = null;\n\n        /**\n         * The initial value of {@link model.globalState}. Must be JSON-safe.\n         * @type {*}\n         */\n        this.globalState = {};\n\n        /**\n         * List of {@link character} definitions.\n         * **Note:** this is not the same as the {@link Character} class!\n         * There's a difference between what you write in your game definition, and what gets passed to the\n         * various callbacks.\n         * @type {character}\n         */\n        this.characters = [];\n\n        /**\n         * List of {@link situation} definitions.\n         * **Note:** this is not the same as the {@link Situation} class!\n         * There's a difference between what you write in your game definition, and what gets passed to the\n         * various callbacks.\n         * @type {situation}\n         */\n        this.situations = [];\n    }\n\n    /**\n     * Called immediately after all initial objects have been created, but before the\n     * first situation has been entered. This is where you would add Markdown plugins\n     * and Nunjucks filters.\n     * @param {model} model \n     * @param {ui} ui \n     */\n    init(model, ui) { }\n\n    /**\n     * Called when the game has requested to enter a new situation. This function returns\n     * a truthy value (`true`) if this should be allowed, `false` if not.\n     * \n     * It is safe to call `model.do()` or `model.goTo()` from `willEnter()`, as long as\n     * you return `false` afterward.\n     * \n     * @param {model} model\n     * @param {ui} ui \n     * @param {string} previousId \n     * @param {string} nextId \n     * @returns {Boolean}\n     */\n    willEnter(model, ui, previousId, nextId) { }\n    \n    /**\n     * Called when the game has just entered a new situation.\n     * @param {model} model \n     * @param {ui} ui\n     * @param {string} previousId \n     * @param {string} nextId \n     */\n    didEnter(model, ui, previousId, nextId) { }\n\n    /**\n     * Called when the game is about to exit a situation.\n     * @param {model} model \n     * @param {ui} ui \n     * @param {string} thisId \n     * @param {string} nextId \n     */\n    willExit(model, ui, thisId, nextId) { }\n\n    /**\n     * Called when the game just exited a situation.\n     * @param {model} model \n     * @param {ui} ui \n     * @param {string} thisId \n     * @param {string} nextId \n     */\n    didExit(model, ui, thisId, nextId) { }\n\n    /**\n     * Called when the game is about to execute the given action on the given sitaution.\n     * @param {model} model \n     * @param {ui} ui \n     * @param {Situation} situation \n     * @param {string} action \n     */\n    willAct(model, ui, situation, action) { }\n\n    /**\n     * Called when the game is just executed the given action on the given sitaution.\n     * @param {model} model \n     * @param {ui} ui \n     * @param {Situation} situation \n     * @param {string} action \n     */\n    didAct(model, ui, situation, action) { }\n};\nexport default game;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/gameformat/game.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "class",
    "name": "game",
    "memberof": "src/jg/gameformat/game.js",
    "static": true,
    "longname": "src/jg/gameformat/game.js~game",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/gameformat/game.js",
    "importStyle": "game",
    "description": "The object you pass to the {@link jumbogrove} function.",
    "examples": [
      "const game = {\n    id: 'jg-example',\n    version: 1,\n    globalState: {\n        aliensHaveInvaded: false,\n    },\n    willEnter: (model, ui, previousId, nextId) => {\n        console.log(\"Transitioning from\", previousId, \"to\", nextId);\n    },\n};\njumbogrove('#app', game);"
    ],
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 153,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jg/gameformat/game.js~game",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "id",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#id",
    "access": "public",
    "description": "An ID unique to your game. Used to determine save location.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "version",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#version",
    "access": "public",
    "description": "The current version of your game. Used to determine save location.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "initialSituation",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#initialSituation",
    "access": "public",
    "description": "The ID of the first situation you want to show the player.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "showNav",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#showNav",
    "access": "public",
    "description": "If you set this to `false`, the left sidebar will not be shown.\nDefault `true`.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "showAside",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#showAside",
    "access": "public",
    "description": "If you set this to `false`, the right sidebar will not be shown.\nDefault `true`.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "defaultStylesheet",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#defaultStylesheet",
    "access": "public",
    "description": "If you set this to `false`, fewer styles will be applied to\nthe HTML.\nDefault `true`.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "autoScroll",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#autoScroll",
    "access": "public",
    "description": "If you set this to `false`, the browser will not scroll as new text\nis added.\nDefault `true`.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "navHeader",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#navHeader",
    "access": "public",
    "description": "The Markdown string you want to show at the top of the left sidebar.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "asideHeader",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#asideHeader",
    "access": "public",
    "description": "The Markdown string you want to show at the top of the right sidebar.\nThis string is processed by the template engine before being displayed.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "gameSaveMessage",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#gameSaveMessage",
    "access": "public",
    "description": "The Markdown string you want to show whenever the game is saved.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "globalState",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#globalState",
    "access": "public",
    "description": "The initial value of {@link model.globalState}. Must be JSON-safe.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "characters",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#characters",
    "access": "public",
    "description": "List of {@link character} definitions.\n**Note:** this is not the same as the {@link Character} class!\nThere's a difference between what you write in your game definition, and what gets passed to the\nvarious callbacks.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "character"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "situations",
    "memberof": "src/jg/gameformat/game.js~game",
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#situations",
    "access": "public",
    "description": "List of {@link situation} definitions.\n**Note:** this is not the same as the {@link Situation} class!\nThere's a difference between what you write in your game definition, and what gets passed to the\nvarious callbacks.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "situation"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "init",
    "memberof": "src/jg/gameformat/game.js~game",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#init",
    "access": "public",
    "description": "Called immediately after all initial objects have been created, but before the\nfirst situation has been entered. This is where you would add Markdown plugins\nand Nunjucks filters.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ui"
        ],
        "spread": false,
        "optional": false,
        "name": "ui",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "willEnter",
    "memberof": "src/jg/gameformat/game.js~game",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#willEnter",
    "access": "public",
    "description": "Called when the game has requested to enter a new situation. This function returns\na truthy value (`true`) if this should be allowed, `false` if not.\n\nIt is safe to call `model.do()` or `model.goTo()` from `willEnter()`, as long as\nyou return `false` afterward.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ui"
        ],
        "spread": false,
        "optional": false,
        "name": "ui",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "previousId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nextId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "didEnter",
    "memberof": "src/jg/gameformat/game.js~game",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#didEnter",
    "access": "public",
    "description": "Called when the game has just entered a new situation.",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ui"
        ],
        "spread": false,
        "optional": false,
        "name": "ui",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "previousId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nextId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "willExit",
    "memberof": "src/jg/gameformat/game.js~game",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#willExit",
    "access": "public",
    "description": "Called when the game is about to exit a situation.",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ui"
        ],
        "spread": false,
        "optional": false,
        "name": "ui",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "thisId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nextId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "didExit",
    "memberof": "src/jg/gameformat/game.js~game",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#didExit",
    "access": "public",
    "description": "Called when the game just exited a situation.",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ui"
        ],
        "spread": false,
        "optional": false,
        "name": "ui",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "thisId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nextId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "willAct",
    "memberof": "src/jg/gameformat/game.js~game",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#willAct",
    "access": "public",
    "description": "Called when the game is about to execute the given action on the given sitaution.",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ui"
        ],
        "spread": false,
        "optional": false,
        "name": "ui",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Situation"
        ],
        "spread": false,
        "optional": false,
        "name": "situation",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "didAct",
    "memberof": "src/jg/gameformat/game.js~game",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/gameformat/game.js~game#didAct",
    "access": "public",
    "description": "Called when the game is just executed the given action on the given sitaution.",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ui"
        ],
        "spread": false,
        "optional": false,
        "name": "ui",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Situation"
        ],
        "spread": false,
        "optional": false,
        "name": "situation",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/jg/gameformat/situation.js",
    "content": "/**\n * An entry in the `game.situations` array.\n * \n * The format of this object matches the constructor of {@link Situation#constructor}.\n */\nclass situation {\n};\nexport default situation;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/gameformat/situation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "situation",
    "memberof": "src/jg/gameformat/situation.js",
    "static": true,
    "longname": "src/jg/gameformat/situation.js~situation",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/gameformat/situation.js",
    "importStyle": "situation",
    "description": "An entry in the `game.situations` array.\n\nThe format of this object matches the constructor of {@link Situation#constructor}.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "src/jg/gamepad.js",
    "content": "/** @ignore */\nfunction bindGamepad(director) {\n  const selectActiveElement = () => {\n    if (document.activeElement) document.activeElement.click();\n  };\n\n  const axisState = ['rest', 'rest', 'rest', 'rest'];\n  const buttonState = [false, false];\n  const update = () => {\n    window.requestAnimationFrame(update);\n\n    if (!navigator.getGamepads) return;\n    const gp = navigator.getGamepads()[0];\n    if (!gp) return;\n    // const isXbox = gp.id.indexOf('360') !== -1 && gp.id.indexOf('45e') !== -1 && gp.id.indexOf('28e') !== -1;\n\n    axisState.forEach((oldState, axis) => {\n      let newState = 'rest';\n      if (gp.axes[axis] > 0.5) {\n        newState = 'right';\n      } else if (gp.axes[axis] < -0.5) {\n        newState = 'left';\n      } else {\n        newState = 'rest';\n      }\n      if (oldState === 'rest' && newState === 'right') {\n        director.focusNextElement();\n      } else if (oldState === 'rest' && newState === 'left') {\n        director.focusPreviousElement();\n      }\n      axisState[axis] = newState;\n    });\n\n    buttonState.forEach((oldState, i) => {\n      if (gp.buttons[i].pressed !== oldState) {\n        buttonState[i] = gp.buttons[i].pressed;\n        if (buttonState[i]) selectActiveElement();\n      }\n    })\n\n  };\n  update();\n}\n\nexport {\n  bindGamepad,\n}",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/gamepad.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "bindGamepad",
    "memberof": "src/jg/gamepad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/gamepad.js~bindGamepad",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/gamepad.js",
    "importStyle": "{bindGamepad}",
    "description": null,
    "lineNumber": 2,
    "ignore": true,
    "params": [
      {
        "name": "director",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/jg/index.js",
    "content": "import JumboGroveDirector from \"./director\";\nexport default JumboGroveDirector;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/jg/model.js",
    "content": "/**\n * @module model\n * @memberof module:jumbogrove\n */\nimport _ from 'lodash';\nimport Character from './character';\nimport Situation from './situation';\n\n/**\n * Maintains game state and allows you to make changes to it.\n * \n * The model object is the primary way for you to interact with Jumbo Grove.\n */\nexport default class model {\n    /**\n     * @ignore\n     * \n     * @param {object} args Arguments object\n     * @param {object[]} args.characters\n     * @param {object} args.globalState\n     * @param {object[]} args.situations\n     * @param {string} args.initialSituation\n     */\n    constructor(director, {characters, globalState, situations, initialSituation}) {\n        /** @ignore */\n        this._director = director;\n        /** @ignore */\n        this._characters = {};\n        /** @ignore */\n        this._situations = {};\n        /** @ignore */\n        this._initialSituationId = initialSituation;\n\n        // These will be injected when the UI is bound to the director\n        /** @ignore */\n        this.navHeaderHTML = null;\n        /** @ignore */\n        this.asideHeaderHTML = null;\n\n        /**\n         * The situation currently being run, or last seen by the user.\n         * @member\n         * @type {Situation|null} */\n        this.currentSituation = null;\n\n        characters.forEach((c) => this._characters[c.id] = new Character(c));\n\n        /**\n         * Store all non-character game state here; **Must be JSON-safe!** You may mutate\n         * this object freely as long as it is safe to convert it to JSON and back.\n         * @member\n         * \n         */\n        this.globalState = _.cloneDeep(globalState);\n\n        /**\n         * The character with ID `'player'`.\n         * @member\n         * @type {Character|null} */\n        this.player = this.character('player') || null;\n\n        situations.forEach((s) => {\n            if (this._situations[s.id]) throw new Error(`Duplicate situation id: ${s.id}`);\n            this._situations[s.id] = new Situation(s);\n        });\n\n        /**\n         * List of all characters in the game.\n         * @member\n         * @type {Character[]} */\n        this.allCharacters = _.sortBy(Object.values(this._characters), ({priority}) => priority || 0);\n    }\n\n    /**\n     * Follow a Jumbo Grove link (`@situation-id` or `>action`).\n     * @param {command} string\n     */\n    do(...args) {\n        return this._director.handleCommandString(...args);\n    }\n\n    /**\n     * Go to the given sitaution (no `@`).\n     * @param {string} id\n     */\n    goTo(...args) {\n        return this._director.goTo(...args);\n    }\n\n    /**\n     * Returns true iff the given string can be handled by Jumbo Grove (rather than being a normal HTML link)\n     * @param {string} string A string to check\n     * @returns {Boolean} \n     */\n    isManagedLink(...args) {\n        return this._director.isManagedLink(...args);\n    }\n\n    /**\n     * Add arbitrary methods to the model object. Since the model is passed to\n     * all callbacks, this is a good way to make convenient functions accessible.\n     * \n     * Also, anything you pass here will also be provided to the template context.\n     * \n     * @param {Map<string, function>} fns Mapping of name to function\n     */\n    extend(fns) {\n        Object.assign(this, fns);\n    }\n\n    /**\n     * @ignore\n     */\n    toSave() {\n        return {\n            globalState: this.globalState,\n            currentSituationId: this.currentSituation ? this.currentSituation.id : null,\n            characters: this.allCharacters.map((c) => c.toSave()),\n            situations: Object.values(this._situations).map((s) => s.toSave()),\n        };\n    }\n\n    /**\n     * @ignore\n     */\n    loadSave(obj) {\n        this.globalState = obj.globalState;\n        this.currentSituation = this._situations[obj.currentSituationId] || null;\n        for (const data of obj.characters) {\n            this.character(data.id).loadSave(data);\n        }\n        for (const s of obj.situations) {\n            this.situation(s.id).loadSave(s);\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    toString() {\n        return `Model(globalState=${this.globalState}, characters=${this.characters})`;\n    }\n\n    /**\n     * Looks up a situation by ID. Prints an error to the console if there isn't one.\n     * @param {string} id \n     * @returns {Situation|null} Situation with the given ID\n     */\n    situation(id) {\n        if (!this._situations[id]) console.error(`Situation not found: ${id}`);\n        return this._situations[id];\n    }\n\n    /**\n     * Returns a list of all situations matching the given ID (`foo`) or tag (`#foo`).\n     * @param {string} idOrTag \n     * @returns {Situation[]}\n     */\n    situations(idOrTag) {\n        if (idOrTag.startsWith(\"#\")) {\n            const tag = idOrTag.slice(1);\n            return Object.values(this._situations)\n                .filter((s) => s.tags.indexOf(tag) !== -1);\n        } else {\n            return [this._situations[idOrTag]];\n        }\n    }\n\n    /**\n     * Look up a character by ID. Returns `undefined` if there isn't one.\n     * @param {string} id \n     */\n    character(id) {\n        return this._characters[id];\n    }\n\n    /**\n     * Return a random number 0-1. Currently this just calls `Math.random()`, but\n     * in the future it might do something fancy with seeds that let you avoid\n     * save scumming.\n     */\n    random() {\n        return Math.random();\n    }\n\n    /**\n     * Given a set of situations, do some smart stuff and return the situations\n     * that match the filter.\n     * \n     * 1. Filter out all situations for which `situation.getCanSee(model, model.currentSituation, situation)` returns `false`.\n     * 2. Find the highest priority that matches a list of situations at least as big as `atLeast`.\n     * 3. If there are more situations left than there are `atMost`, randomly remove some.\n     * 4. Sort by `situation.displayOrder`.\n     * \n     * Note that it is possible to end up with a list of situations for which `getCanChoose()` returned `false` for all of them!\n     * \n     * This logic has been shamelessly stolen from Undum.\n     * \n     * @param {string[]} arrayOfSituationIdsOrTags Like `['one-situation', '#situations-matching-this-tag']`\n     * @param {number} atLeast \n     * @param {number} atMost \n     */\n    interpretChoices(arrayOfSituationIdsOrTags, atLeast = 0, atMost = Number.MAX_VALUE) {\n        const host = this.currentSituation;\n        if (host.debugChoices) debugger;  // eslint-disable-line no-debugger\n        const situations = [].concat.apply(\n            [], arrayOfSituationIdsOrTags.map(this.situations.bind(this)));\n        // remove invisible situations\n        const visibleSituations = situations.filter((s) => s.getCanSee(this, host, s));\n\n        // sort by display order\n        const sortedSituations = _.sortBy(\n            visibleSituations, (s) => s.getDisplayOrder(this, host));\n\n        // index by priority; figure out what priorities are being used\n        const sortedSituationsByPriority = {};\n        const prioritiesSeen = [];\n        for (const s of sortedSituations) {\n            const p = s.getPriority(this, host);\n            if (!sortedSituationsByPriority[p]) sortedSituationsByPriority[p] = [];\n            sortedSituationsByPriority[p].push(s);\n            prioritiesSeen.push(p);\n        }\n\n        // figure out what priority we want to use (only one!)\n        let chosenPriority = Number.MAX_VALUE;\n        for (const p of _.uniq(prioritiesSeen.sort().reverse())) {\n            if (sortedSituationsByPriority[p].length >= atLeast) {\n                chosenPriority = p;\n                break;\n            }\n        }\n        let chosenSituations = sortedSituationsByPriority[chosenPriority];\n        if (!chosenSituations) {\n            return [];  // Uh oh!\n        }\n\n        // Remove random array items until we are under the limit\n        while (chosenSituations.length > atMost) {\n            const i = Math.floor(this.random() * chosenSituations.length);\n            chosenSituations.splice(i, 1);\n        }\n\n        // return the chosen situations and provide more info for each\n        const allChoices = chosenSituations.map((s) => {\n            return {\n                situationId: s.id,\n                text: s.getOptionText(this, host),\n                isEnabled: s.getCanChoose(this, host),\n            };\n        });\n        return allChoices.filter(({isEnabled}) => isEnabled).concat(allChoices.filter(({isEnabled}) => !isEnabled));\n    }\n\n    /**\n     * Given an array of tags or situation IDs (can be both in the same array),\n     * present the relevant choices in the transcript using the logic in\n     * {@link model.interpretChoices}, then go to the situation chosen by the\n     * player.\n     * @param {string[]} arrayOfSituationIdsOrTags Array of strings containing either `#tags` or `situation-ids`.\n     */\n    presentChoices(arrayOfSituationIdsOrTags) {\n        this._director.ui.presentChoices(arrayOfSituationIdsOrTags)\n            .then(({situationId, itemId}) => {\n                this.do(`@${situationId}`, itemId, 'fake');\n            });\n    }\n}",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "class",
    "name": "model",
    "memberof": "src/jg/model.js",
    "static": true,
    "longname": "src/jg/model.js~model",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/model.js",
    "importStyle": "model",
    "description": "Maintains game state and allows you to make changes to it.\n\nThe model object is the primary way for you to interact with Jumbo Grove.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 181,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments object"
      },
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args.characters",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args.globalState",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args.situations",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.initialSituation",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "_director",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#_director",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "_characters",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#_characters",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "_situations",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#_situations",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "_initialSituationId",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#_initialSituationId",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "navHeaderHTML",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#navHeaderHTML",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "asideHeaderHTML",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#asideHeaderHTML",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "currentSituation",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#currentSituation",
    "access": "public",
    "description": "The situation currently being run, or last seen by the user.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Situation",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "globalState",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#globalState",
    "access": "public",
    "description": "Store all non-character game state here; **Must be JSON-safe!** You may mutate\nthis object freely as long as it is safe to convert it to JSON and back.",
    "lineNumber": 54,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "player",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#player",
    "access": "public",
    "description": "The character with ID `'player'`.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Character",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "allCharacters",
    "memberof": "src/jg/model.js~model",
    "static": false,
    "longname": "src/jg/model.js~model#allCharacters",
    "access": "public",
    "description": "List of all characters in the game.",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "Character[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "do",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#do",
    "access": "public",
    "description": "Follow a Jumbo Grove link (`@situation-id` or `>action`).",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "command"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "goTo",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#goTo",
    "access": "public",
    "description": "Go to the given sitaution (no `@`).",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "isManagedLink",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#isManagedLink",
    "access": "public",
    "description": "Returns true iff the given string can be handled by Jumbo Grove (rather than being a normal HTML link)",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "A string to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "extend",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#extend",
    "access": "public",
    "description": "Add arbitrary methods to the model object. Since the model is passed to\nall callbacks, this is a good way to make convenient functions accessible.\n\nAlso, anything you pass here will also be provided to the template context.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<string, function>"
        ],
        "spread": false,
        "optional": false,
        "name": "fns",
        "description": "Mapping of name to function"
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "toSave",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#toSave",
    "access": "public",
    "description": "",
    "lineNumber": 114,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "{\"globalState\": *, \"currentSituationId\": *, \"characters\": *, \"situations\": *}"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "loadSave",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#loadSave",
    "access": "public",
    "description": "",
    "lineNumber": 126,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "toString",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#toString",
    "access": "public",
    "description": "",
    "lineNumber": 140,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "situation",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#situation",
    "access": "public",
    "description": "Looks up a situation by ID. Prints an error to the console if there isn't one.",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Situation|null} Situation with the given ID"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Situation",
        "null"
      ],
      "spread": false,
      "description": "Situation with the given ID"
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "situations",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#situations",
    "access": "public",
    "description": "Returns a list of all situations matching the given ID (`foo`) or tag (`#foo`).",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Situation[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrTag",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Situation[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "character",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#character",
    "access": "public",
    "description": "Look up a character by ID. Returns `undefined` if there isn't one.",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "random",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#random",
    "access": "public",
    "description": "Return a random number 0-1. Currently this just calls `Math.random()`, but\nin the future it might do something fancy with seeds that let you avoid\nsave scumming.",
    "lineNumber": 182,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "interpretChoices",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#interpretChoices",
    "access": "public",
    "description": "Given a set of situations, do some smart stuff and return the situations\nthat match the filter.\n\n1. Filter out all situations for which `situation.getCanSee(model, model.currentSituation, situation)` returns `false`.\n2. Find the highest priority that matches a list of situations at least as big as `atLeast`.\n3. If there are more situations left than there are `atMost`, randomly remove some.\n4. Sort by `situation.displayOrder`.\n\nNote that it is possible to end up with a list of situations for which `getCanChoose()` returned `false` for all of them!\n\nThis logic has been shamelessly stolen from Undum.",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrayOfSituationIdsOrTags",
        "description": "Like `['one-situation', '#situations-matching-this-tag']`"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "atLeast",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "atMost",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "presentChoices",
    "memberof": "src/jg/model.js~model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/model.js~model#presentChoices",
    "access": "public",
    "description": "Given an array of tags or situation IDs (can be both in the same array),\npresent the relevant choices in the transcript using the logic in\n{@link model.interpretChoices}, then go to the situation chosen by the\nplayer.",
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrayOfSituationIdsOrTags",
        "description": "Array of strings containing either `#tags` or `situation-ids`."
      }
    ],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/jg/qualities/flag.js",
    "content": "/**\n * If `value` is true, some text appears. Otherwise, no text appears.\n * @type {Quality}\n * @example\n * {\n *    initialValue: true|false,\n *    name: 'This text appears in the sidebar if true, otherwise nothing'\n * }\n */\nconst flag = {\n    isVisible: (character, quality, value) => !!value,\n    isLabeled: (character, quality, value) => false,\n    format: (character, quality, value) => {\n        return value ? quality.name : '';\n    },\n};\nexport default flag;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/flag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "flag",
    "memberof": "src/jg/qualities/flag.js",
    "static": true,
    "longname": "src/jg/qualities/flag.js~flag",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/flag.js",
    "importStyle": "flag",
    "description": "If `value` is true, some text appears. Otherwise, no text appears.",
    "examples": [
      "{\n   initialValue: true|false,\n   name: 'This text appears in the sidebar if true, otherwise nothing'\n}"
    ],
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Quality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "src/jg/qualities/fudgeAdjective.js",
    "content": "import wordScale from \"./wordScale\";\n/**\n * Shortcut for `wordScale` with a word list of 'terrible', 'poor', 'mediocre', 'fair', 'good', 'great', 'superb'\n * where -3 = terrible, 0 = fair, and 3 = superb.\n * @type {Quality}\n * @example\n * {\n *    initialValue: 0,  // a number\n * }\n */\nconst fudgeAdjective = {\n    format: (character, quality, value) => {\n        return wordScale.format(\n            character,\n            {\n                ...quality,\n                offset: 3,\n                words: ['terrible', 'poor', 'mediocre', 'fair', 'good', 'great', 'superb'],\n            },\n            value);\n    },\n};\nexport default fudgeAdjective;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/fudgeAdjective.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "name": "fudgeAdjective",
    "memberof": "src/jg/qualities/fudgeAdjective.js",
    "static": true,
    "longname": "src/jg/qualities/fudgeAdjective.js~fudgeAdjective",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/fudgeAdjective.js",
    "importStyle": "fudgeAdjective",
    "description": "Shortcut for `wordScale` with a word list of 'terrible', 'poor', 'mediocre', 'fair', 'good', 'great', 'superb'\nwhere -3 = terrible, 0 = fair, and 3 = superb.",
    "examples": [
      "{\n   initialValue: 0,  // a number\n}"
    ],
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Quality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/jg/qualities/index.js",
    "content": "/** @ignore */\nimport flag from \"./flag\";\nimport fudgeAdjective from \"./fudgeAdjective\";\nimport integer from \"./integer\";\nimport namedChoice from \"./namedChoice\";\nimport nonZeroInteger from \"./nonZeroInteger\";\nimport onOff from \"./onOff\";\nimport raw from \"./raw\";\nimport wordScale from \"./wordScale\";\nimport yesNo from \"./yesNo\";\n\n/**\n * Object containing all qualities indexed by key.\n * @type {object}\n */\nconst qualities = {\n  flag,\n  fudgeAdjective,\n  integer,\n  namedChoice,\n  nonZeroInteger,\n  onOff,\n  raw,\n  wordScale,\n  yesNo,\n};\nexport default qualities;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "qualities",
    "memberof": "src/jg/qualities/index.js",
    "static": true,
    "longname": "src/jg/qualities/index.js~qualities",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/index.js",
    "importStyle": "qualities",
    "description": "Object containing all qualities indexed by key.",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/jg/qualities/integer.js",
    "content": "/**\n * Decimals are truncated from the value when displaying.\n * @type {Quality}\n * @example\n * {\n *    initialValue: 0,  // a number\n * }\n */\nconst integer = {\n    format: (character, quality, value) => Math.floor(value).toString(),\n};\nexport default integer;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/integer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "integer",
    "memberof": "src/jg/qualities/integer.js",
    "static": true,
    "longname": "src/jg/qualities/integer.js~integer",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/integer.js",
    "importStyle": "integer",
    "description": "Decimals are truncated from the value when displaying.",
    "examples": [
      "{\n   initialValue: 0,  // a number\n}"
    ],
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Quality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/jg/qualities/namedChoice.js",
    "content": "/**\n * Simple transform of one value to another.\n * @type {Quality}\n * @example\n * {\n *    initialValue: 'foo',  // anything\n *    labelMap: {'foo': 'bar'},  // renders 'foo' as 'bar'\n * }\n */\nconst namedChoice = {\n    format: (character, quality, value) => {\n        return quality.labelMap[value];\n    },\n};\nexport default namedChoice;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/namedChoice.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "namedChoice",
    "memberof": "src/jg/qualities/namedChoice.js",
    "static": true,
    "longname": "src/jg/qualities/namedChoice.js~namedChoice",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/namedChoice.js",
    "importStyle": "namedChoice",
    "description": "Simple transform of one value to another.",
    "examples": [
      "{\n   initialValue: 'foo',  // anything\n   labelMap: {'foo': 'bar'},  // renders 'foo' as 'bar'\n}"
    ],
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Quality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "src/jg/qualities/nonZeroInteger.js",
    "content": "/**\n * Same as `integer`, but doesn't appear in sidebar if equal to zero.\n * @type {Quality}\n * @example\n * {\n *    initialValue: 0,  // a number\n * }\n */\nconst nonZeroInteger = {\n    isVisible: (character, quality, value) => !!value,\n    format: (character, quality, value) => {\n        if (value === 0) return '';\n        return Math.floor(value).toString();\n    },\n};\nexport default nonZeroInteger;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/nonZeroInteger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "nonZeroInteger",
    "memberof": "src/jg/qualities/nonZeroInteger.js",
    "static": true,
    "longname": "src/jg/qualities/nonZeroInteger.js~nonZeroInteger",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/nonZeroInteger.js",
    "importStyle": "nonZeroInteger",
    "description": "Same as `integer`, but doesn't appear in sidebar if equal to zero.",
    "examples": [
      "{\n   initialValue: 0,  // a number\n}"
    ],
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Quality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "file",
    "name": "src/jg/qualities/onOff.js",
    "content": "/**\n * Displays `on`/`off` based on `value` truthiness (if no `words` provided), or\n * `words[0]`/`words[1]` (falsey word comes first)\n * @type {Quality}\n * @example\n * {\n *    initialValue: true|false,\n *    words: ['nope', 'yep']\n * }\n */\nconst onOff = {\n  format: (character, quality, value) => {\n    const words = quality.words || ['off', 'on'];\n    return words[value ? 1 : 0];\n  },\n};\nexport default onOff;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/onOff.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "onOff",
    "memberof": "src/jg/qualities/onOff.js",
    "static": true,
    "longname": "src/jg/qualities/onOff.js~onOff",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/onOff.js",
    "importStyle": "onOff",
    "description": "Displays `on`/`off` based on `value` truthiness (if no `words` provided), or\n`words[0]`/`words[1]` (falsey word comes first)",
    "examples": [
      "{\n   initialValue: true|false,\n   words: ['nope', 'yep']\n}"
    ],
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Quality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/jg/qualities/raw.js",
    "content": "/**\n * Displays the value unchanged.\n * @type {Quality}\n * @example\n * {\n *    initialValue: 'whatever',\n * }\n */\nconst raw = {\n  format: (character, quality, value) => value,\n};\nexport default raw;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/raw.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "raw",
    "memberof": "src/jg/qualities/raw.js",
    "static": true,
    "longname": "src/jg/qualities/raw.js~raw",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/raw.js",
    "importStyle": "raw",
    "description": "Displays the value unchanged.",
    "examples": [
      "{\n   initialValue: 'whatever',\n}"
    ],
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Quality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "src/jg/qualities/wordScale.js",
    "content": "import _ from 'lodash';\n/**\n * Map an integer value to a word list, with optional offset.\n * @type {Quality}\n * @example\n * {\n *    initialValue: 0,  // a number\n *    words: ['bad', 'ok', 'good'],\n *    offset: 0  // rendered text = words[value + offset]\n * }\n */\nconst wordScale = {\n    format: (character, quality, value) => {\n        if (!quality.words) return '';\n        let offsetValue = value;\n        if (quality.offset) offsetValue += quality.offset;\n        if (offsetValue >= 0 && offsetValue < quality.words.length) {\n            return quality.words[offsetValue];\n        } else if (offsetValue >= quality.words.length && quality.useBonuses) {\n            return _.last(quality.words) + '+' + (\n                offsetValue - quality.words.length + 1);\n        } else if (offsetValue < 0 && quality.useBonuses) {\n            return quality.words[0] + offsetValue;\n        } else {\n            return ''\n        }\n    },\n};\nexport default wordScale;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/wordScale.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "wordScale",
    "memberof": "src/jg/qualities/wordScale.js",
    "static": true,
    "longname": "src/jg/qualities/wordScale.js~wordScale",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/wordScale.js",
    "importStyle": "wordScale",
    "description": "Map an integer value to a word list, with optional offset.",
    "examples": [
      "{\n   initialValue: 0,  // a number\n   words: ['bad', 'ok', 'good'],\n   offset: 0  // rendered text = words[value + offset]\n}"
    ],
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Quality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "src/jg/qualities/yesNo.js",
    "content": "import onOff from \"./onOff\";\n/**\n * Same oas `onOf`, but defaults to `yes` / `no`.\n * @type {Quality}\n * @example\n * {\n *    initialValue: true|false,\n * }\n */\nconst yesNo = {\n  format: (character, quality, value) => {\n    return onOff.format(character, {words: ['no', 'yes']}, value);\n  },\n};\nexport default yesNo;",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/qualities/yesNo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "yesNo",
    "memberof": "src/jg/qualities/yesNo.js",
    "static": true,
    "longname": "src/jg/qualities/yesNo.js~yesNo",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/qualities/yesNo.js",
    "importStyle": "yesNo",
    "description": "Same oas `onOf`, but defaults to `yes` / `no`.",
    "examples": [
      "{\n   initialValue: true|false,\n}"
    ],
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Quality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/jg/situation.js",
    "content": "import _ from 'lodash';\n\nconst nop = () => { };\nconst tru = () => true;\n/**\n */\nexport default class Situation {\n    /**\n     * \n     * @param {object} args\n     * @param {string} args.id\n     * @param {Boolean} args.autosave If true, game will save when scene is\n     *                                entered. Default false.\n     * @param {Boolean} args.autosave If true, transcript will be cleared when\n     *                                scene is entered. Default false.\n     * @param {string} args.content\n     *      Markdown template to be rendered to the transcript when this\n     *      situation is entered. {@see /markup.html}\n     * @param {string[]} args.choices\n     *      List of situation IDs or tags. See\n     *      {@link model#interpretChoices} for how this works.\n     * @param {Map<string,string>} args.snippets\n     *      Snippets used by writers/replacers. {@see /writers_replacers.html}.\n     * @param {object|null} args.input \n     *      If provided, prompts user for input. Looks like\n     *      `input: {placeholder: \"Your name\", next: \"situation-id\", store: function(model, value)}`\n     * @param {string|null} args.input.placeholder\n     *      Placeholder value for the HTML input field \n     * @param {string} args.input.next\n     *      Situation or action to go to after user enters a value.\n     *      Must start with either `@` (for situation IDs) or `>`\n     *      (for actions).\n     * @param {function(model: model, value: string)} args.input.store\n     *      Your chance to do something with the given alue\n     * @param {Boolean} args.debugChoices See {@link debugChoices}\n     * @param {function(model: model, hostSituation: Situation): Boolean} getCanChoose\n     *      If this function is provided and returns `false`, this situation\n     *      is not linkified in the choices list.\n     * @param {function(model: model, hostSituation: Situation): Boolean} getCanSee\n     *      If this function is provided and returns `false`, the situation\n     *      will not show up in the choices list for the situation presenting\n     *      the choice.\n     * @param {number|function(model: model, hostSituation: Situation): number} priority\n     *      May be a constant number, or function returning a number. This value\n     *      is used by {@link model#interpretChoices}.\n     * @param {number|function(model: model, hostSituation: Situation): number} displayOrder\n     *      May be a constant number, or function returning a number. This value\n     *      is used by {@link model#interpretChoices}.\n     * @param {string|function(model: model, hostSituation: Situation): string} optionText\n     *      Text shown to user when being presented as a choice.\n     * @param {function(model: model, ui: ui, fromSituation: Situation): Boolean} willEnter\n     *      This situation will enter, unless this function returns `false`. It\n     *      is safe to call `model.do()` from here, as long as you then return\n     *      `false`.\n     * @param {function(model: model, ui: ui, fromSituation: Situation)} enter\n     *      The situation has been entered, and {@link Situation#content} has\n     *      been written to the transcript.\n     * @param {function(model: model, ui: ui, toSituation: Situation)} exit\n     *      The situation is being exited, but the next situation has not yet\n     *      been entered.\n     * @param {function(model: model, ui: ui, action: String)} act\n     *      An action-based link has been clicked. You might just want to use\n     *      the `actions` key instead of this function if you're just mapping\n     *      action names to functions.\n     * @param {Map<string,function>} actions\n     *      Map of action name to function that is called when the user invokes\n     *      the action.\n     * \n     * @example\n     *  jumbogrove('#app', {\n     *      id: 'situations-example',\n     *      autosave: true,\n     * \n     *      // stuff related to this situation being a choice in another situation:\n     *      optionText: \"Proclaim hungriness\",\n     *      getCanChoose: (model, host) => true,\n     *      getCanSee: (model, host) => true,\n     *      priority: 1,\n     *      displayOrder: 1,\n     * \n     *      // stuff related to content and what happens inside the situation:\n     *      content: `\n     *      I am [very](>replaceself:more_adjectives) hungry.\n     * \n     *      [Eat](>eat)\n     * \n     *      [Go to restaurant](@restaurant)\n     *      `,\n     *      snippets: {\n     *          more_adjectives: \"very, very, very, very\"\n     *      },\n     *      act: (model, ui, action) => console.log(\"did action\", action),\n     *      actions: {\n     *          eat: () => console.log(\"OM NOM NOM\"),\n     *      },\n     * \n     *      // going to other situations:\n     *      choices: ['next-situation', '#situations-involving-food'],\n     *      // normally you wouldn't have 'choices' and 'input' in the same situation.\n     *      input: {\n     *          placeholder: \"Please enter your favorite food.\",\n     *          next: \"@restaurant\",\n     *      },\n     *      debugChoices: false,\n     * \n     *      // lifecycle\n     *      willEnter: (model, ui, from) => true,\n     *      enter: (model, ui, from) => console.log(\"entered\"),\n     *      exit: (model, ui, from) => console.log(\"exited\"),\n     *  });\n     */\n    constructor({\n        id,\n        tags = [],\n        totalVisits = 0,\n        autosave = false,\n        clear = false,\n        content = null,\n        choices = null,\n        snippets = {},\n        input = null,\n        debugChoices = false,\n        getCanChoose = tru,\n        getCanSee = tru,\n        priority = 0,\n        displayOrder = 0,\n        optionText = null,\n        willEnter = tru,\n        enter = nop,\n        act = nop,\n        actions = {},\n        exit = nop,\n    }) {\n        /**\n         * ID of this situation.\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * Tags associated with this situation.\n         * @type {string[]}\n         */\n        this.tags = tags;\n\n        /**\n         * Number of times this situation has been successfully entered.\n         * This value persists when saving and loading.\n         * @type {number}\n         */\n        this.totalVisits = totalVisits;\n\n        /**\n         * If `true`, then presenting choices from this situation will call `debugger`\n         * so you can step through the code and see what's up.\n         * @type {Boolean}\n         */\n        this.debugChoices = debugChoices;\n\n        Object.assign(this, {\n            getCanChoose, getCanSee, priority, clear,\n            displayOrder, optionText, enter, act, exit, content, actions, choices,\n            snippets, input, willEnter, autosave,\n        });\n    }\n\n    /**\n     * Returns `true` if this situation has the given tag, otherwise `false`.\n     * @param {string} tag The tag to check for\n     * @returns {bool}\n     */\n    hasTag(tag) {\n        return this.tags.indexOf(tag) !== -1;\n    }\n\n    /** @ignore */\n    toSave() {\n        return _.pick(this, ['totalVisits', 'id']);\n    }\n\n    /** @ignore */\n    loadSave(obj) {\n        _.assign(this, obj);\n    }\n\n    /** @ignore */\n    doEnter(model, ui) {\n        this.totalVisits += 1;\n        if (this.clear) {\n            ui.clear();\n        }\n        if (this.content) {\n            ui.writeMarkdown(this.content);\n        }\n        this.enter.apply(this, arguments);\n        if (this.input) {\n            ui.promptInput({placeholder: this.input.placeholder})\n                .then((value) => { \n                    this.input.store(model, value);\n                    model.do(this.input.next);\n                });\n        }\n        if (this.choices) {\n            ui.presentChoices(this.choices).then(({situationId, itemId}) => {\n                model.do(`@${situationId}`, itemId, 'fake');\n            });\n        }\n    }\n\n    /** @ignore */\n    doExit(model, ui, toSituation) {\n        ui.nextGroup();\n        this.exit.apply(this, arguments);\n    }\n\n    /** @ignore */\n    doAct(model, ui, action, ...args) {\n        if (this.actions && this.actions[action]) {\n            this.actions[action](model, ui, ...args);\n        } else {\n            this.act(model, ui, action);\n        }\n    }\n\n    /** @ignore */\n    getOptionText() {\n        if (_.isFunction(this.optionText)) {\n            return this.optionText.apply(this, arguments);\n        } else {\n            return this.optionText || this.id;\n        }\n    }\n\n    /** @ignore */\n    getPriority() {\n        if (_.isFunction(this.priority)) {\n            return this.priority.apply(this, arguments);\n        } else {\n            return this.priority;\n        }\n    }\n\n    /** @ignore */\n    getDisplayOrder() {\n        if (_.isFunction(this.displayOrder)) {\n            return this.displayOrder.apply(this, arguments);\n        } else {\n            return this.displayOrder;\n        }\n    }\n}",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/situation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "nop",
    "memberof": "src/jg/situation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/situation.js~nop",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/situation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "tru",
    "memberof": "src/jg/situation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jg/situation.js~tru",
    "access": "public",
    "export": false,
    "importPath": "jumbogrove/src/jg/situation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "class",
    "name": "Situation",
    "memberof": "src/jg/situation.js",
    "static": true,
    "longname": "src/jg/situation.js~Situation",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/situation.js",
    "importStyle": "Situation",
    "description": "",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 231,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#constructor",
    "access": "public",
    "description": "",
    "examples": [
      " jumbogrove('#app', {\n     id: 'situations-example',\n     autosave: true,\n\n     // stuff related to this situation being a choice in another situation:\n     optionText: \"Proclaim hungriness\",\n     getCanChoose: (model, host) => true,\n     getCanSee: (model, host) => true,\n     priority: 1,\n     displayOrder: 1,\n\n     // stuff related to content and what happens inside the situation:\n     content: `\n     I am [very](>replaceself:more_adjectives) hungry.\n\n     [Eat](>eat)\n\n     [Go to restaurant](@restaurant)\n     `,\n     snippets: {\n         more_adjectives: \"very, very, very, very\"\n     },\n     act: (model, ui, action) => console.log(\"did action\", action),\n     actions: {\n         eat: () => console.log(\"OM NOM NOM\"),\n     },\n\n     // going to other situations:\n     choices: ['next-situation', '#situations-involving-food'],\n     // normally you wouldn't have 'choices' and 'input' in the same situation.\n     input: {\n         placeholder: \"Please enter your favorite food.\",\n         next: \"@restaurant\",\n     },\n     debugChoices: false,\n\n     // lifecycle\n     willEnter: (model, ui, from) => true,\n     enter: (model, ui, from) => console.log(\"entered\"),\n     exit: (model, ui, from) => console.log(\"exited\"),\n });"
    ],
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.autosave",
        "description": "If true, game will save when scene is\n                               entered. Default false."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.autosave",
        "description": "If true, transcript will be cleared when\n                               scene is entered. Default false."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.content",
        "description": "Markdown template to be rendered to the transcript when this\n     situation is entered. {@see /markup.html}"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args.choices",
        "description": "List of situation IDs or tags. See\n     {@link model#interpretChoices} for how this works."
      },
      {
        "nullable": null,
        "types": [
          "Map<string,string>"
        ],
        "spread": false,
        "optional": false,
        "name": "args.snippets",
        "description": "Snippets used by writers/replacers. {@see /writers_replacers.html}."
      },
      {
        "nullable": null,
        "types": [
          "object",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "args.input",
        "description": "If provided, prompts user for input. Looks like\n     `input: {placeholder: \"Your name\", next: \"situation-id\", store: function(model, value)}`"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "args.input.placeholder",
        "description": "Placeholder value for the HTML input field"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.input.next",
        "description": "Situation or action to go to after user enters a value.\n     Must start with either `@` (for situation IDs) or `>`\n     (for actions)."
      },
      {
        "nullable": null,
        "types": [
          "function(model: model, value: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "args.input.store",
        "description": "Your chance to do something with the given alue"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.debugChoices",
        "description": "See {@link debugChoices}"
      },
      {
        "nullable": null,
        "types": [
          "function(model: model, hostSituation: Situation): Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "getCanChoose",
        "description": "If this function is provided and returns `false`, this situation\n     is not linkified in the choices list."
      },
      {
        "nullable": null,
        "types": [
          "function(model: model, hostSituation: Situation): Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "getCanSee",
        "description": "If this function is provided and returns `false`, the situation\n     will not show up in the choices list for the situation presenting\n     the choice."
      },
      {
        "nullable": null,
        "types": [
          "number",
          "function(model: model, hostSituation: Situation): number"
        ],
        "spread": false,
        "optional": false,
        "name": "priority",
        "description": "May be a constant number, or function returning a number. This value\n     is used by {@link model#interpretChoices}."
      },
      {
        "nullable": null,
        "types": [
          "number",
          "function(model: model, hostSituation: Situation): number"
        ],
        "spread": false,
        "optional": false,
        "name": "displayOrder",
        "description": "May be a constant number, or function returning a number. This value\n     is used by {@link model#interpretChoices}."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "function(model: model, hostSituation: Situation): string"
        ],
        "spread": false,
        "optional": false,
        "name": "optionText",
        "description": "Text shown to user when being presented as a choice."
      },
      {
        "nullable": null,
        "types": [
          "function(model: model, ui: ui, fromSituation: Situation): Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "willEnter",
        "description": "This situation will enter, unless this function returns `false`. It\n     is safe to call `model.do()` from here, as long as you then return\n     `false`."
      },
      {
        "nullable": null,
        "types": [
          "function(model: model, ui: ui, fromSituation: Situation)"
        ],
        "spread": false,
        "optional": false,
        "name": "enter",
        "description": "The situation has been entered, and {@link Situation#content} has\n     been written to the transcript."
      },
      {
        "nullable": null,
        "types": [
          "function(model: model, ui: ui, toSituation: Situation)"
        ],
        "spread": false,
        "optional": false,
        "name": "exit",
        "description": "The situation is being exited, but the next situation has not yet\n     been entered."
      },
      {
        "nullable": null,
        "types": [
          "function(model: model, ui: ui, action: String)"
        ],
        "spread": false,
        "optional": false,
        "name": "act",
        "description": "An action-based link has been clicked. You might just want to use\n     the `actions` key instead of this function if you're just mapping\n     action names to functions."
      },
      {
        "nullable": null,
        "types": [
          "Map<string,function>"
        ],
        "spread": false,
        "optional": false,
        "name": "actions",
        "description": "Map of action name to function that is called when the user invokes\n     the action."
      }
    ]
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "id",
    "memberof": "src/jg/situation.js~Situation",
    "static": false,
    "longname": "src/jg/situation.js~Situation#id",
    "access": "public",
    "description": "ID of this situation.",
    "lineNumber": 138,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "tags",
    "memberof": "src/jg/situation.js~Situation",
    "static": false,
    "longname": "src/jg/situation.js~Situation#tags",
    "access": "public",
    "description": "Tags associated with this situation.",
    "lineNumber": 144,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "totalVisits",
    "memberof": "src/jg/situation.js~Situation",
    "static": false,
    "longname": "src/jg/situation.js~Situation#totalVisits",
    "access": "public",
    "description": "Number of times this situation has been successfully entered.\nThis value persists when saving and loading.",
    "lineNumber": 151,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "debugChoices",
    "memberof": "src/jg/situation.js~Situation",
    "static": false,
    "longname": "src/jg/situation.js~Situation#debugChoices",
    "access": "public",
    "description": "If `true`, then presenting choices from this situation will call `debugger`\nso you can step through the code and see what's up.",
    "lineNumber": 158,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "hasTag",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#hasTag",
    "access": "public",
    "description": "Returns `true` if this situation has the given tag, otherwise `false`.",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{bool}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "The tag to check for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "toSave",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#toSave",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "loadSave",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#loadSave",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "doEnter",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#doEnter",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "ignore": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "ui",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "doExit",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#doExit",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "ignore": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "ui",
        "types": [
          "*"
        ]
      },
      {
        "name": "toSituation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "doAct",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#doAct",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "ignore": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "ui",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "getOptionText",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#getOptionText",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "getPriority",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#getPriority",
    "access": "public",
    "description": null,
    "lineNumber": 235,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "getDisplayOrder",
    "memberof": "src/jg/situation.js~Situation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/situation.js~Situation#getDisplayOrder",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "src/jg/vueui.js",
    "content": "import Vue from 'vue';\nimport DataUI from \"./dataui\";\nimport JGHTMLItem from \"@/components/JGHTMLItem\";\nimport JGChoiceItem from \"@/components/JGChoiceItem\";\nimport JGInputItem from \"@/components/JGInputItem\";\n\n/** @ignore */\nexport default class VueUI extends DataUI {\n  constructor() {\n    super(...arguments);\n    this.componentMap = {\n      'html': JGHTMLItem,\n      'choice': JGChoiceItem,\n      'input': JGInputItem,\n    };\n    this.bus = new Vue();\n  }\n\n  append() {\n    if (!this.componentMap[arguments[0].type]) {\n      throw Error(`Missing component for type ${arguments[0].type}`);\n    }\n    this.bus.$emit('refocus');\n    super.append.apply(this, arguments);\n  }\n\n  register(type, VueComponentClass) {\n    this.componentMap[type] = VueComponentClass;\n  }\n}",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/jg/vueui.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "class",
    "name": "VueUI",
    "memberof": "src/jg/vueui.js",
    "static": true,
    "longname": "src/jg/vueui.js~VueUI",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/jg/vueui.js",
    "importStyle": "VueUI",
    "description": null,
    "lineNumber": 8,
    "ignore": true,
    "interface": false,
    "extends": [
      "src/jg/dataui.js~DataUI"
    ]
  },
  {
    "__docId__": 248,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jg/vueui.js~VueUI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/vueui.js~VueUI#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "componentMap",
    "memberof": "src/jg/vueui.js~VueUI",
    "static": false,
    "longname": "src/jg/vueui.js~VueUI#componentMap",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"html\": *, \"choice\": *, \"input\": *}"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "bus",
    "memberof": "src/jg/vueui.js~VueUI",
    "static": false,
    "longname": "src/jg/vueui.js~VueUI#bus",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "append",
    "memberof": "src/jg/vueui.js~VueUI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/vueui.js~VueUI#append",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "register",
    "memberof": "src/jg/vueui.js~VueUI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jg/vueui.js~VueUI#register",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "VueComponentClass",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "src/main.js",
    "content": "/** @module jumbogrove */\nimport Vue from 'vue'\nimport App from './App'\nimport JumboGroveDirector from \"./jg\";\nimport VueUI from \"./jg/vueui\";\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\n\n/**\n * The main entry point for Jumbo Grove; call `jumbogrove.jumbogrove(selector, data)`\n * \n * @example\n * import { jumbogrove } from 'jumbogrove';\n * jumbogrove('#game', {\n *  // your game here\n * });\n * \n * @param {string} selector A CSS selector for the element you want the story to be rendered in.\n * @param {game} data Your story\n */\nconst jumbogrove = (selector, data) => {\n  const director = new JumboGroveDirector(data);\n  const ui = new VueUI();\n  director.bindToUI(ui);\n  if (!document.querySelector(selector)) {\n    throw new Error(`Can't run Jumbo Grove; no selector matches ${selector}`);\n  }\n  const existingClasses = document.querySelector(selector).className;\n  new Vue({\n    el: selector,\n    template: '<App :director=\"director\" :ui=\"ui\" :class=\"existingClasses\" />',\n    components: { App },\n    data: {director, ui, existingClasses},\n  });\n};\n\nwindow.jumbogrove = {\n  jumbogrove,\n};\n\nexport {\n  jumbogrove,\n}",
    "static": true,
    "longname": "/Users/steve/_d/libraries/jumbogrove/src/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "function",
    "name": "jumbogrove",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~jumbogrove",
    "access": "public",
    "export": true,
    "importPath": "jumbogrove/src/main.js",
    "importStyle": "{jumbogrove}",
    "description": "The main entry point for Jumbo Grove; call `jumbogrove.jumbogrove(selector, data)`",
    "examples": [
      "import { jumbogrove } from 'jumbogrove';\njumbogrove('#game', {\n // your game here\n});"
    ],
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "A CSS selector for the element you want the story to be rendered in."
      },
      {
        "nullable": null,
        "types": [
          "game"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Your story"
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Jumbo Grove\n\nJumbo Grove is a tool for writing hypertext interactive fiction. *Hypertext*\nmeans text with links. *[Interactive fiction](https://en.wikipedia.org/wiki/Interactive_fiction)*\nis a medium for storytelling that crosses over into video games.\n\n## Features\n\n* Desktop, mobile, and gamepad support\n* Fully documented API\n* Packaged as a single JS file or as an NPM package\n* Many games require no \"coding\"\n\n## Quick Start\n\nYou can put up a fresh site with Jumbo Grove in less than 30 seconds by\n[remixing this project on Glitch.](https://glitch.com/edit/#!/remix/jumbo-grove-demo)\nYou can edit the game in a browser and it will live-update a real site!\n\n## Docs\n\n\n### [Tutorial](http://steveasleep.com/jumbogrove/manual/tutorial_basics.html)\n\n### [API](http://steveasleep.com/jumbogrove/identifiers.html)\n\n## Demo\n\nJumbo Grove was used to make [this unfinished Ludum Dare game.](http://steveasleep.com/please-come-in)\n\nIf you are on the [Jumbo Grove documentation site](http://steveasleep.com/jumbogrove/)\n(as opposed to reading the Readme on GitHub) then you will see a quick demo here:\n\n<div id=\"firstdemo\" class=\"jg-headless\"></div>\n\n## Demo source code \n\nHere's the source code for the above demo:\n\n```js\njumbogrove.jumbogrove('#firstdemo', {\n  id: 'demo',\n  situations: [\n    {\n      id: 'start',\n      content: `\n      ### The Jumbo Grove Experience\n      You are looking at a [web page](>write:web_page).\n      `,\n      snippets: {\n        web_page: `\n        It is the documentation for Jumbo Grove. What do you want to do?\n\n        * [Make a game](@make-a-game)\n        * [Admire the beautiful CSS](@admire-css)\n        `\n      }\n    },\n    {\n      id: 'make-a-game',\n      content: `\n      You type until your fingers are [sore](>replaceself:sore_fingers).\n      You make something incredible.\n      `,\n      snippets: {\n        sore_fingers: \"sore (like, really sore)\"\n      },\n      choices: ['admire-css'],\n    },\n    {\n      id: 'admire-css',\n      optionText: 'Admire the CSS',\n      content: `\n      Your eyes trace the loving lines of the sidebar and the curves of the fonts.\n\n      ### The End\n      `\n    },\n  ]\n});\n```\n\n## \"Jumbo Grove\"?\n\nInteractive Fiction = IF  \nI + 1, F + 1 = J, G  \nJ[umbo] G[rove]\n",
    "longname": "/Users/steve/_d/libraries/jumbogrove/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"jumbogrove\",\n  \"version\": \"0.2.0\",\n  \"description\": \"Interactive fiction game engine\",\n  \"author\": \"Steve Johnson\",\n  \"license\": \"MIT\",\n  \"private\": false,\n  \"main\": \"dist/app\",\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",\n    \"start\": \"npm run dev\",\n    \"test\": \"jest '.*.test.js' --coverage\",\n    \"watchtest\": \"jest '.*.test.js' --watch\",\n    \"lint\": \"eslint --ext .js,.vue src test/unit/specs\",\n    \"doc\": \"esdoc\",\n    \"build\": \"node build/build.js\",\n    \"lib\": \"node build/buildlib.js\",\n    \"standalone\": \"node build/buildstandalone.js\",\n    \"deploy\": \"yarn lib && yarn standalone && yarn doc && ghp-import -np docs_out\",\n    \"ld40\": \"yarn build && ghp-import -np dist -r ld40\"\n  },\n  \"dependencies\": {\n    \"animated-scroll-to\": \"^1.1.7\",\n    \"lodash\": \"^4.17.4\",\n    \"markdown-it\": \"^8.4.0\",\n    \"markdown-it-attrs\": \"^1.2.0\",\n    \"nunjucks\": \"^3.0.1\",\n    \"vue\": \"^2.5.2\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^7.1.2\",\n    \"babel-core\": \"^6.22.1\",\n    \"babel-eslint\": \"^7.1.1\",\n    \"babel-jest\": \"^21.0.2\",\n    \"babel-loader\": \"^7.1.1\",\n    \"babel-plugin-transform-runtime\": \"^6.22.0\",\n    \"babel-preset-env\": \"^1.3.2\",\n    \"babel-preset-stage-2\": \"^6.22.0\",\n    \"babel-register\": \"^6.22.0\",\n    \"chalk\": \"^2.0.1\",\n    \"copy-webpack-plugin\": \"^4.0.1\",\n    \"css-loader\": \"^0.28.0\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-inject-script-plugin\": \"^1.0.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^3.19.0\",\n    \"eslint-config-standard\": \"^10.2.1\",\n    \"eslint-friendly-formatter\": \"^3.0.0\",\n    \"eslint-loader\": \"^1.7.1\",\n    \"eslint-plugin-html\": \"^3.0.0\",\n    \"eslint-plugin-import\": \"^2.7.0\",\n    \"eslint-plugin-node\": \"^5.2.0\",\n    \"eslint-plugin-promise\": \"^3.4.0\",\n    \"eslint-plugin-standard\": \"^3.0.1\",\n    \"eventsource-polyfill\": \"^0.9.6\",\n    \"extract-text-webpack-plugin\": \"^3.0.0\",\n    \"file-loader\": \"^1.1.4\",\n    \"friendly-errors-webpack-plugin\": \"^1.6.1\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"jest\": \"^21.2.0\",\n    \"node-notifier\": \"^5.1.2\",\n    \"node-sass\": \"^4.7.2\",\n    \"optimize-css-assets-webpack-plugin\": \"^3.2.0\",\n    \"ora\": \"^1.2.0\",\n    \"portfinder\": \"^1.0.13\",\n    \"postcss-import\": \"^11.0.0\",\n    \"postcss-loader\": \"^2.0.8\",\n    \"rimraf\": \"^2.6.0\",\n    \"sass-loader\": \"^6.0.6\",\n    \"semver\": \"^5.3.0\",\n    \"shelljs\": \"^0.7.6\",\n    \"url-loader\": \"^0.5.8\",\n    \"vue-jest\": \"^1.0.2\",\n    \"vue-loader\": \"^13.3.0\",\n    \"vue-style-loader\": \"^3.0.1\",\n    \"vue-template-compiler\": \"^2.5.2\",\n    \"webpack\": \"^3.10.0\",\n    \"webpack-bundle-analyzer\": \"^2.9.0\",\n    \"webpack-dev-server\": \"^2.9.1\",\n    \"webpack-merge\": \"^4.1.0\"\n  },\n  \"jest\": {\n    \"moduleFileExtensions\": [\n      \"js\",\n      \"json\",\n      \"vue\"\n    ],\n    \"moduleNameMapper\": {\n      \"^@/(.*)$\": \"<rootDir>/src/$1\"\n    },\n    \"transform\": {\n      \"^.+\\\\.js$\": \"<rootDir>/node_modules/babel-jest\",\n      \".*\\\\.(vue)$\": \"<rootDir>/node_modules/vue-jest\"\n    },\n    \"setupFiles\": [\n      \"<rootDir>/test/unit/setup\"\n    ],\n    \"mapCoverage\": true,\n    \"coverageDirectory\": \"<rootDir>/test/unit/coverage\",\n    \"collectCoverageFrom\": [\n      \"src/**/*.{js,vue}\",\n      \"!src/main.js\",\n      \"!src/router/index.js\",\n      \"!**/node_modules/**\"\n    ]\n  },\n  \"engines\": {\n    \"node\": \">= 4.0.0\",\n    \"npm\": \">= 3.0.0\"\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\",\n    \"not ie <= 8\"\n  ]\n}\n",
    "longname": "/Users/steve/_d/libraries/jumbogrove/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# Jumbo Grove\n\nJumbo Grove is a tool for writing hypertext interactive fiction. *Hypertext*\nmeans text with links. *[Interactive fiction](https://en.wikipedia.org/wiki/Interactive_fiction)*\nis a medium for storytelling that crosses over into video games.\n\n## Features\n\n* Desktop, mobile, and gamepad support\n* Fully documented API\n* Packaged as a single JS file or as an NPM package\n* Many games require no \"coding\"\n\n## Quick Start\n\nYou can put up a fresh site with Jumbo Grove in less than 30 seconds by\n[remixing this project on Glitch.](https://glitch.com/edit/#!/remix/jumbo-grove-demo)\nYou can edit the game in a browser and it will live-update a real site!\n\n## Docs\n\n\n### [Tutorial](http://steveasleep.com/jumbogrove/manual/tutorial_basics.html)\n\n### [API](http://steveasleep.com/jumbogrove/identifiers.html)\n\n## Demo\n\nJumbo Grove was used to make [this unfinished Ludum Dare game.](http://steveasleep.com/please-come-in)\n\nIf you are on the [Jumbo Grove documentation site](http://steveasleep.com/jumbogrove/)\n(as opposed to reading the Readme on GitHub) then you will see a quick demo here:\n\n<div id=\"firstdemo\" class=\"jg-headless\"></div>\n\n## Demo source code \n\nHere's the source code for the above demo:\n\n```js\njumbogrove.jumbogrove('#firstdemo', {\n  id: 'demo',\n  situations: [\n    {\n      id: 'start',\n      content: `\n      ### The Jumbo Grove Experience\n      You are looking at a [web page](>write:web_page).\n      `,\n      snippets: {\n        web_page: `\n        It is the documentation for Jumbo Grove. What do you want to do?\n\n        * [Make a game](@make-a-game)\n        * [Admire the beautiful CSS](@admire-css)\n        `\n      }\n    },\n    {\n      id: 'make-a-game',\n      content: `\n      You type until your fingers are [sore](>replaceself:sore_fingers).\n      You make something incredible.\n      `,\n      snippets: {\n        sore_fingers: \"sore (like, really sore)\"\n      },\n      choices: ['admire-css'],\n    },\n    {\n      id: 'admire-css',\n      optionText: 'Admire the CSS',\n      content: `\n      Your eyes trace the loving lines of the sidebar and the curves of the fonts.\n\n      ### The End\n      `\n    },\n  ]\n});\n```\n\n## \"Jumbo Grove\"?\n\nInteractive Fiction = IF  \nI + 1, F + 1 = J, G  \nJ[umbo] G[rove]\n",
    "longname": "/Users/steve/_d/libraries/jumbogrove/Readme.md",
    "name": "./Readme.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/steve/_d/libraries/jumbogrove/dist",
    "name": "dist",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/steve/_d/libraries/jumbogrove/Readme.md",
    "name": "./Readme.md",
    "content": "# Jumbo Grove\n\nJumbo Grove is a tool for writing hypertext interactive fiction. *Hypertext*\nmeans text with links. *[Interactive fiction](https://en.wikipedia.org/wiki/Interactive_fiction)*\nis a medium for storytelling that crosses over into video games.\n\n## Features\n\n* Desktop, mobile, and gamepad support\n* Fully documented API\n* Packaged as a single JS file or as an NPM package\n* Many games require no \"coding\"\n\n## Quick Start\n\nYou can put up a fresh site with Jumbo Grove in less than 30 seconds by\n[remixing this project on Glitch.](https://glitch.com/edit/#!/remix/jumbo-grove-demo)\nYou can edit the game in a browser and it will live-update a real site!\n\n## Docs\n\n\n### [Tutorial](http://steveasleep.com/jumbogrove/manual/tutorial_basics.html)\n\n### [API](http://steveasleep.com/jumbogrove/identifiers.html)\n\n## Demo\n\nJumbo Grove was used to make [this unfinished Ludum Dare game.](http://steveasleep.com/please-come-in)\n\nIf you are on the [Jumbo Grove documentation site](http://steveasleep.com/jumbogrove/)\n(as opposed to reading the Readme on GitHub) then you will see a quick demo here:\n\n<div id=\"firstdemo\" class=\"jg-headless\"></div>\n\n## Demo source code \n\nHere's the source code for the above demo:\n\n```js\njumbogrove.jumbogrove('#firstdemo', {\n  id: 'demo',\n  situations: [\n    {\n      id: 'start',\n      content: `\n      ### The Jumbo Grove Experience\n      You are looking at a [web page](>write:web_page).\n      `,\n      snippets: {\n        web_page: `\n        It is the documentation for Jumbo Grove. What do you want to do?\n\n        * [Make a game](@make-a-game)\n        * [Admire the beautiful CSS](@admire-css)\n        `\n      }\n    },\n    {\n      id: 'make-a-game',\n      content: `\n      You type until your fingers are [sore](>replaceself:sore_fingers).\n      You make something incredible.\n      `,\n      snippets: {\n        sore_fingers: \"sore (like, really sore)\"\n      },\n      choices: ['admire-css'],\n    },\n    {\n      id: 'admire-css',\n      optionText: 'Admire the CSS',\n      content: `\n      Your eyes trace the loving lines of the sidebar and the curves of the fonts.\n\n      ### The End\n      `\n    },\n  ]\n});\n```\n\n## \"Jumbo Grove\"?\n\nInteractive Fiction = IF  \nI + 1, F + 1 = J, G  \nJ[umbo] G[rove]\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/steve/_d/libraries/jumbogrove/manual/where_to_find_the_api.md",
    "name": "./manual/where_to_find_the_api.md",
    "content": "# Where to find the API reference\n\n[Here is the API reference.](../identifiers.html)\nIt has details about situations, models, qualities, and more.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/steve/_d/libraries/jumbogrove/manual/tutorial_basics.md",
    "name": "./manual/tutorial_basics.md",
    "content": "# The Basics\n\nIn this guide:\n\n* Situations: what are they?\n* Tags\n* Writing text\n* Presenting choices\n\n## The Maze\n\nFor our first game, we will create a simple maze for the player to\nsolve. **You won't need to write any JavaScript functions for this section.**\n\nTo help us keep things straight, here's a map of the maze\nwe'll create:\n\n```\nin +-+-+-+-+\n --> |   | |\n   + + + + +\n   |   |   |\n   + +-+ +-+\n   |   |   |\n   +-+ + + +\n   |   | | --> out\n   +-+-+-+-+\n```\n\nAll content is written in HTML and\n[Markdown](https://daringfireball.net/projects/markdown/syntax).\nYou should read up on Markdown before continuing.\n[Try it live in your browser here.](http://markdownlivepreview.com/)\n\n## Introducing situations\n\nA Jumbo Grove game is made of **situations**. You can also think of\nthem as \"rooms,\" but we use the word \"situation\" because all they are\nis some hypertext shown to the player, and a decision to be made\n(which link to click).\n\nThe bare minimum for a Jumbo Grove game is an `id` that uniquely identifies\nyour game, and at least one situation:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'maze-game-2000',\n  situations: [\n    {\n      id: 'start',  // the situation with id=start is how the game begins\n      content: `\n        You are standing at the entrance of a maze.\n      ` // <- backticks let you write multi-line strings.\n        //    You can indent multi-line strings as much as you want.\n        //    Jumbo Grove will remove the extra spaces.\n    }\n  ]\n});\n```\n\nIf you're not an experienced JavaScript programmer, you might be doing\na lot of copying and pasting. That's OK! You might need to\n[ask a lot of questions.](https://github.com/irskep/jumbogrove/issues/new)\nThat's also OK!\n\nIn fact, here is an **officially sanctioned copy-paste template for situations:**\n\n```js\n{\n  id: 'REPLACE THIS',\n  tags: [],  // like ['maze-room', 'castle']\n  autosave: false,\n  displayOrder: 0,  // determines placement in choices list (higher = farther down)\n  optionText: 'Go to the copy-pasted situation',\n  content: `\n    # Title, if you want\n\n    Some more text\n\n    [Append some text](>write:text_to_append)\n\n    [Replace this with some text](>replaceself:text_to_replace)\n\n    [Go to another situation](@some-situation-id)\n\n    [Perform an action](>some_action)\n  `,\n  snippets: {\n    text_to_append: \"Here is some more text.\",\n    text_to_replace: \"I'm a little teapot\"\n  },\n  choices: ['#maze-room', 'some-situation-id'],\n  actions: {\n    some_action: function(model, ui, action) {\n      console.log(\"You did a\", action);\n    }\n  }\n}\n```\n\nIt doesn't include absolutely everything, but it does have the most common fields.\n\n## Laying out the maze\n\nLet's assign letters to each square in the maze:\n\n```\n   +-+-+-+-+\n->  A|B C|D|\n   + + + + +\n   |E F|G H|\n   + +-+ +-+\n   |I J|K L|\n   +-+ + + +\n   |M N|O|P ->\n   +-+-+-+-+\n```\n\nLooking at the upper left, you can see that the entrance of the maze leads to\nsituation A.\n\nThere are two ways to write that out. Here's Option 1:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'maze-game',\n  situations: [\n    {\n      id: 'start',  // the situation with id=start is how the game begins\n      content: `\n        You are standing at the entrance of a maze.\n\n        [Enter the maze](@A)\n      `\n    },\n    {id: 'A', content: \"You are standing in cell A.\", optionText: \"Enter the maze\"}\n  ]\n});\n```\n\n**When you write a Markdown link whose target starts with `@`, it links\nto the situation with that ID** instead of behaving like a normal HTML link.\n`[Enter the maze](@A)` creates a link that moves the player to situation `'A'`.\nWhenever you show the user any HTML, Jumbo Grove scans it for specially formatted\nlinks like this.\n\nHere's Option 2:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'maze-game',\n  situations: [\n    {\n      id: 'start',  // the situation with id=start is how the game begins\n      content: `\n        You are standing at the entrance of a maze.\n      `,\n      choices: ['A']\n    },\n    {id: 'A', content: \"You are standing in cell A.\", optionText: \"Enter the maze\"}\n  ]\n});\n```\n\nInstead of writing out the link in our `content` string, we provide a list of\nIDs that are OK to go to next, and the situation itself says what the\nchoice text should say.\n\nHere's the maze game so far, running right in this page:\n\n<div id=\"maze-1\" class=\"jg-headless\"></div>\n\nHere's the whole maze wired up the same way. The solution is `AEFBCGKLP`.\n\n<div id=\"maze-2\" class=\"jg-headless\"></div>\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'maze-game',\n  situations: [\n    {\n      id: 'start',  // the situation with id=start is how the game begins\n      content: `\n        You are standing at the entrance of a maze.\n      `,\n      choices: ['A']\n    },\n    { id: 'A', optionText: \"Enter the maze\",\n      content: \"You are standing in cell A.\",\n      choices: ['E'] },\n    { id: 'B', optionText: \"Go to B\", content: \"You are standing in cell B.\",\n      choices: ['F', 'C']},\n    { id: 'C', optionText: \"Go to C\", content: \"You are standing in cell C.\",\n      choices: ['B', 'G']},\n    { id: 'D', optionText: \"Go to D\", content: \"You are standing in cell D.\",\n      choices: ['H']},\n    { id: 'E', optionText: \"Go to E\", content: \"You are standing in cell E.\",\n      choices: ['A', 'I', 'F']},\n    { id: 'F', optionText: \"Go to F\", content: \"You are standing in cell F.\",\n      choices: ['E', 'B']},\n    { id: 'G', optionText: \"Go to G\", content: \"You are standing in cell G.\",\n      choices: ['C', 'K', 'H']},\n    { id: 'H', optionText: \"Go to H\", content: \"You are standing in cell H.\",\n      choices: ['G', 'D']},\n    { id: 'I', optionText: \"Go to I\", content: \"You are standing in cell I.\",\n      choices: ['E', 'J']},\n    { id: 'J', optionText: \"Go to J\", content: \"You are standing in cell J.\",\n      choices: ['I', 'N']},\n    { id: 'K', optionText: \"Go to K\", content: \"You are standing in cell K.\",\n      choices: ['G', 'O', 'L']},\n    { id: 'L', optionText: \"Go to L\", content: \"You are standing in cell L.\",\n      choices: ['K', 'P']},\n    { id: 'M', optionText: \"Go to M\", content: \"You are standing in cell M.\",\n      choices: ['N']},\n    { id: 'N', optionText: \"Go to N\", content: \"You are standing in cell N.\",\n      choices: ['M', 'J']},\n    { id: 'O', optionText: \"Go to O\", content: \"You are standing in cell O.\",\n      choices: ['K']},\n    { id: 'P', optionText: \"Go to P\", content: \"You are standing in cell P.\",\n      choices: ['L', 'win']},\n    {\n      id: 'win',\n      optionText: 'Exit the maze',\n      content: `\n        You exit the maze victorious!\n      `\n    }\n  ]\n});\n```\n\n## Introducing Tags\n\nWhen you specify some `choices` for your situation, you can include a\nhashtag to refer to a _group_ of situations.\n\nIn this case, the `living-room` situation would provide choices for\nboth the `bathroom` and `bedroom` situations:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'house-game',\n  initialSituation: 'living-room',  // use this instead of 'start' if you want\n  situations: [\n    {\n      id: 'living-room',\n      optionText: 'Go to the living room',\n      content: \"The living room has a couch and a TV.\",\n      choices: ['#from-living-room']\n    },\n    {\n      id: 'bathroom',\n      tags: ['from-living-room'],\n      optionText: \"Enter the bathroom\",\n      displayOrder: 2,  // show up AFTER the bedroom in the choices list\n      content: \"The bathroom contains a sink and a toilet.\",\n      choices: ['living-room']\n    },\n    {\n      id: 'bedroom',\n      tags: ['from-living-room'],\n      displayOrder: 1,  // show up BEFORE the bathroom in the choices list\n      optionText: \"Enter the bedroom\",\n      content: \"The bedroom is filled by a queen sized bed and a dresser.\",\n      choices: ['living-room']\n    },\n  ]\n})\n```\n\n## Maze game teleporter pads\n\nWe can use this feature to add teleporter pads to a few cells of our maze.\nAny teleporter room can send the user to any other teleporter room.\nIf we have lots of teleporters, we don't want to have to individually\nconnect them all!\n\nThe marked squares will contain teleporters:\n\n```\nin +-+-+-+-+\n->   |   |D|\n   + + + + +\n   |   |   |\n   + +-+ +-+\n   |   |  L|\n   +-+ + + +\n   |M  | |  -> out\n   +-+-+-+-+\n```\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'maze-game',\n  situations: [\n    {\n      id: 'start',  // the situation with id=start is how the game begins\n      content: `\n        You are standing at the entrance of a maze.\n      `,\n      choices: ['A']\n    },\n    { id: 'A', optionText: \"Enter the maze\",\n      content: \"You are standing in cell A.\",\n      choices: ['E'] },\n    { id: 'B', optionText: \"Go to B\", content: \"You are standing in cell B.\",\n      choices: ['F', 'C']},\n    { id: 'C', optionText: \"Go to C\", content: \"You are standing in cell C.\",\n      choices: ['B', 'G']},\n    {\n      id: 'D',\n      tags: ['teleporter'],\n      optionText: \"Go to D\",\n      content: \"You are standing in cell D. There is a teleporter here.\",\n      choices: ['H', '#teleporter']\n    },\n    { id: 'E', optionText: \"Go to E\", content: \"You are standing in cell E.\",\n      choices: ['A', 'I', 'F']},\n    { id: 'F', optionText: \"Go to F\", content: \"You are standing in cell F.\",\n      choices: ['E', 'B']},\n    { id: 'G', optionText: \"Go to G\", content: \"You are standing in cell G.\",\n      choices: ['C', 'K', 'H']},\n    { id: 'H', optionText: \"Go to H\", content: \"You are standing in cell H.\",\n      choices: ['G', 'D']},\n    { id: 'I', optionText: \"Go to I\", content: \"You are standing in cell I.\",\n      choices: ['E', 'J']},\n    { id: 'J', optionText: \"Go to J\", content: \"You are standing in cell J.\",\n      choices: ['I', 'N']},\n    { id: 'K', optionText: \"Go to K\", content: \"You are standing in cell K.\",\n      choices: ['G', 'O', 'L']},\n    {\n      id: 'L',\n      tags: ['teleporter'],\n      optionText: \"Go to L\",\n      content: \"You are standing in cell L. There is a teleporter here.\",\n      choices: ['K', 'P', '#teleporter']\n    },\n    {\n      id: 'M',\n      tags: ['teleporter'],\n      optionText: \"Go to M\",\n      content: \"You are standing in cell M. There is a teleporter here.\",\n      choices: ['N', '#teleporter']\n    },\n    { id: 'N', optionText: \"Go to N\", content: \"You are standing in cell N.\",\n      choices: ['M', 'J']},\n    { id: 'O', optionText: \"Go to O\", content: \"You are standing in cell O.\",\n      choices: ['K']},\n    { id: 'P', optionText: \"Go to P\", content: \"You are standing in cell P.\",\n      choices: ['L', 'win']},\n    {\n      id: 'win',\n      optionText: 'Exit the maze',\n      content: `\n        You exit the maze victorious!\n      `\n    }\n  ]\n});\n```\n\nThe user can now take a more circuitous route to the exit:\n`AEIJNMLKOP`. Here's the running code:\n\n<div id=\"maze-3\" class=\"jg-headless\"></div>\n\n## Clearing the Transcript\n\nIf you don't like the continuous scrolling style and prefer something more like\nTwine, you can add `clear: true` to your situation. Here's the maze example,\nwith each situation clearing the screen.\n\n<div id=\"maze-clear-example\" class=\"jg-headless\"></div>\n\n```js\njumbogrove.jumbogrove('#game' {\n  id: 'maze-game',\n  situations: [\n    {\n      id: 'start',  // the situation with id=start is how the game begins\n      content: `\n        You are standing at the entrance of a maze.\n      `,\n      choices: ['A']\n    },\n    { id: 'A', optionText: \"Enter the maze\",\n      clear: true,\n      content: \"You are standing in cell A.\",\n      choices: ['E'] },\n    { id: 'B', optionText: \"Go to B\", content: \"You are standing in cell B.\",\n      clear: true,\n      choices: ['F', 'C']},\n    { id: 'C', optionText: \"Go to C\", content: \"You are standing in cell C.\",\n      clear: true,\n      choices: ['B', 'G']},\n    {\n      id: 'D',\n      tags: ['teleporter'],\n      optionText: \"Go to D\",\n      clear: true,\n      content: \"You are standing in cell D. There is a teleporter here.\",\n      choices: ['H', '#teleporter']\n    },\n    { id: 'E', optionText: \"Go to E\", content: \"You are standing in cell E.\",\n      clear: true,\n      choices: ['A', 'I', 'F']},\n    { id: 'F', optionText: \"Go to F\", content: \"You are standing in cell F.\",\n      clear: true,\n      choices: ['E', 'B']},\n    { id: 'G', optionText: \"Go to G\", content: \"You are standing in cell G.\",\n      clear: true,\n      choices: ['C', 'K', 'H']},\n    { id: 'H', optionText: \"Go to H\", content: \"You are standing in cell H.\",\n      clear: true,\n      choices: ['G', 'D']},\n    { id: 'I', optionText: \"Go to I\", content: \"You are standing in cell I.\",\n      clear: true,\n      choices: ['E', 'J']},\n    { id: 'J', optionText: \"Go to J\", content: \"You are standing in cell J.\",\n      clear: true,\n      choices: ['I', 'N']},\n    { id: 'K', optionText: \"Go to K\", content: \"You are standing in cell K.\",\n      clear: true,\n      choices: ['G', 'O', 'L']},\n    {\n      id: 'L',\n      tags: ['teleporter'],\n      optionText: \"Go to L\",\n      clear: true,\n      content: \"You are standing in cell L. There is a teleporter here.\",\n      choices: ['K', 'P', '#teleporter']\n    },\n    {\n      id: 'M',\n      tags: ['teleporter'],\n      optionText: \"Go to M\",\n      clear: true,\n      content: \"You are standing in cell M. There is a teleporter here.\",\n      choices: ['N', '#teleporter']\n    },\n    { id: 'N', optionText: \"Go to N\", content: \"You are standing in cell N.\",\n      clear: true,\n      choices: ['M', 'J']},\n    { id: 'O', optionText: \"Go to O\", content: \"You are standing in cell O.\",\n      clear: true,\n      choices: ['K']},\n    { id: 'P', optionText: \"Go to P\", content: \"You are standing in cell P.\",\n      clear: true,\n      choices: ['L', 'win']},\n    {\n      id: 'win',\n      optionText: 'Exit the maze',\n      clear: true,\n      content: `\n        You exit the maze victorious!\n      `\n    }\n  ]\n});\n```\n\nThat's most of what you can do without writing any JavaScript functions.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/steve/_d/libraries/jumbogrove/manual/tutorial_scripting.md",
    "name": "./manual/tutorial_scripting.md",
    "content": "# Scripting Choices\n\nIn this guide:\n\n* `situation.optionText` as a function (`function(model, host) -> Bool`)\n* `situation.getCanSee(model, host) -> Bool`\n* `situation.getCanChoose(model, host) -> Bool`\n* `situation.enter(model, ui, fromSituation)`\n* `situation.priority`\n* `model.globalState`\n\n## Custom option text\n\n*This section builds on the code from [the previous section](tutorial_basics.html).*\n\nYou might have noticed that when you first \"Enter the maze\" and then\n\"Go to E,\" one of the options is still \"Enter the maze,\" which takes you\nback to Cell A.\n\nWe can fix this using a little bit of JavaScript. `situation.optionText` can be either\na string, or a function! ([You can see a reference for all the `situation` values\nhere](../class/src/jg/situation.js~Situation.html).)\n\nIt looks like this:\n\n```js\n{\n  id: 'my-situation',\n  optionText: function(model, hostSituation) {\n    return 'a string';\n  }\n}\n```\n\nThe `model` argument will be explained later. `hostSituation` is the\nsituation that is presenting the choice.\n\nHere's how we can use that in our game.\n(From here on out, when we're just modifying one situation, we'll just list out\nthe code for that situation, instead of the whole game.)\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'maze-game',\n  situations: [\n    /* ... */\n    { id: 'A',\n\n      /* THIS IS THE IMPORTANT PART */\n      optionText: function(model, hostSituation) {\n        if (hostSituation.id === 'start') {\n          return 'Enter the maze';\n        } else {\n          return 'Go to A';\n        }\n      },\n      /* end important part */\n\n      content: \"You are standing in cell A.\",\n      choices: ['E'] },\n    /* ... */\n  ]\n})\n```\n\nWe can also add some spice to our teleporter cells. Instead of \"Go to X\", they\ncan say \"Teleport to X\" if they are being presented as a choice from another\nteleporter situation.\n\nThere is a method on situation objects,\n[`Situation.hasTag()`](../class/src/jg/situation.js~Situation.html#instance-method-hasTag),\nthat we can use to quickly determine if the \"host\" situation (the situation presenting\nthe choice) has a particular tag.\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'maze-game',\n  situations: [\n    /* ... */\n      {\n        id: 'D',\n        tags: ['teleporter'],\n        optionText: function(model, host) {\n          if (host.hasTag('teleporter')) {\n            return 'Teleport to D';\n          } else {\n            return 'Go to D';\n          }\n        },\n        content: \"You are standing in cell D. There is a teleporter here.\",\n        choices: ['H', '#teleporter']\n      },\n    /* ... */\n      {\n        id: 'L',\n        tags: ['teleporter'],\n        optionText: function(model, host) {\n          if (host.hasTag('teleporter')) {\n            return 'Teleport to L';\n          } else {\n            return 'Go to L';\n          }\n        },\n        content: \"You are standing in cell L. There is a teleporter here.\",\n        choices: ['K', 'P', '#teleporter']\n      },\n      {\n        id: 'M',\n        tags: ['teleporter'],\n        optionText: function(model, host) {\n          if (host.hasTag('teleporter')) {\n            return 'Teleport to M';\n          } else {\n            return 'Go to M';\n          }\n        },\n        content: \"You are standing in cell M. There is a teleporter here.\",\n        choices: ['N', '#teleporter']\n      },\n    /* ... */\n  ]\n})\n```\n\nIf you're an experienced JavaScript programmer you might want to consolidate that\nlogic a bit. Go right ahead!\n\nHere are the changes in action. You can walk to cell D by visiting cells\n`AEFBCGHD`, where you can see the teleporter options.\n\n<div id=\"maze-4\" class=\"jg-headless\"></div>\n\n## Remembering things\n\nLet's design a new maze. It will be physically smaller, but it will require\nthe player to find a key to solve.\n\n```\n+-------+-------+\n|       |       |\n|  key  | exit   \n|       |       |\n+-     -+- door-+\n|       |       |\n| start   empty |\n|       |       |\n+-------+-------+\n```\n\nWe want our logic to look something like this:\n\n* When the player enters the 'key' room,\n  * Then remember that the player has the key.\n  * Once the player has the key, stop showing the 'key' room.\n* When the player enters the empty room,\n  * Only show the `door` choice if they have the key.\n\nTo accomplish this task, we need to use three new features of situations.\nEach one is a function you can provide which is called by Jumbo Grove\nwhen something happens or a decision needs to be made.\n\n* `situation.getCanSee(model, host)` may prevent the host situation from displaying\n  this situation as a choice by returning `false`.\n* `situation.getCanChoose(model, host)` may let the player *see* a choice,\n  but not *take* it. This is so they know there is an option they haven't\n  yet unlocked.\n* `situation.enter(model, ui, fromSituation)` is called when the player\n  enters a situation, *after* `content` has been shown.\n\nAnd finally, we need to make use of the `model`. The model object\n[does a lot of things.](../class/src/jg/model.js~model.html)\nWhat we care about right now is the `model.globalState` object.\n\n### model.globalState\n\nThis object may contain anything you like, as long as it is safe too\nconvert it to JSON. `globalState` is part of your game's *save file*.\n\nThings that can be converted to JSON include:\n\n* Numbers\n* Strings (`\"hello\"`)\n* Booleans (`true`, `false`)\n* Lists or objects containing numbers, strings, or booleans\n\n*Everything else* is unsafe to use.\n\n### Tiny maze example\n\nHere's our tiny maze game in full:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'prison-escape',\n  // You can specify the initial value of globalState like this\n  globalState: {\n    playerHasKey: false,\n  },\n  situations: [\n    {\n      id: 'start',\n      optionText: 'Return to your bedroom',\n      content: `\n        You are standing in a cold, damp cell. A straw mattress lies in\n        the corner.\n      `,\n      choices: ['key-room', 'door-room'],\n    },\n\n    {\n      id: 'key-room',\n      // In the ASCII map I drew this as a whole room, but the flavor\n      // text just calls it a hole in the wall.\n      optionText: 'Inspect hole in the wall',\n      getCanSee: function(model, host) {\n        // only visible if player doesn't already have the key\n        return model.globalState.playerHasKey === false;\n      },\n      enter: function(model, ui, from) {\n        model.globalState.playerHasKey = true;\n      },\n      content: `\n        There is a key hidden in the hole!\n      `,\n      choices: ['start']\n    },\n\n    {\n      id: 'door-room',\n      optionText: 'Walk to the other end of the room',\n      content: `\n        There is a locked door here.\n      `,\n      choices: ['start', 'win-the-game']\n    },\n\n    {\n      id: 'win-the-game',\n      optionText: 'Unlock the door',\n      getCanChoose: function(model, host) {\n        // only pickable if player DOES have the key\n        return model.globalState.playerHasKey === true;\n      },\n      content: `\n        You walk out into the hallway. You're free!\n\n        # Game Over\n      `\n    }\n\n  ]\n});\n```\n\n<div id=\"prison-escape\" class=\"jg-headless\"></div>\n\n## Priority\n\nImagine you're making a game about a high school crush. The player is\nat a party, and may talk to anyone. But when their crush walks in the\nroom, all they can do is stammer and stare.\n\nWe could write a `getCanSee` function for every person you talk to,\nbut it's much simpler to use `situation.priority`!\n\nWhen a situation's choices have different priorities, it only shows\nchoices of situations *with the highest priority.*\n\nSo if situations A, B, and C have `priority: 0`, but situations E and F\nhave `priority: 1`, then only E and F will be presented.\n\nAll situations have priority 0 by default.\n\nHere's a small demonstration:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'party-crush',\n  globalState: {\n    turnsUntilCrushEnters: 2,\n    hasTalkedToJeff: false,\n    hasTalkedToXiao: false,\n    hasTalkedToMegan: false,\n    hasTalkedToMarta: false\n  },\n  situations: [\n    {\n      id: 'start',\n      content: \"You have entered a pretty chill party.\",\n      choices: ['#talk-to-someone'],\n    },\n\n    {\n      id: 'jeff', tags: ['talk-to-someone'],\n      optionText: \"Talk to Jeff\",\n      getCanSee: function(model) { return !model.globalState.hasTalkedToJeff; },\n      enter: function(model) {\n        model.globalState.hasTalkedToJeff = true;\n        model.globalState.turnsUntilCrushEnters -= 1;\n      },\n      content: \"You catch up with Jeff. He aced his math test.\",\n      choices: ['#talk-to-someone']\n    },\n\n    {\n      id: 'xiao', tags: ['talk-to-someone'],\n      optionText: \"Talk to Xiao\",\n      getCanSee: function(model) { return !model.globalState.hasTalkedToXiao; },\n      enter: function(model) {\n        model.globalState.hasTalkedToXiao = true;\n        model.globalState.turnsUntilCrushEnters -= 1;\n      },\n      content: \"You catch up with Xiao. He scored the winning goal at a football game.\",\n      choices: ['#talk-to-someone']\n    },\n\n    {\n      id: 'megan', tags: ['talk-to-someone'],\n      optionText: \"Talk to Megan\",\n      getCanSee: function(model) { return !model.globalState.hasTalkedToMegan; },\n      enter: function(model) {\n        model.globalState.hasTalkedToMegan = true;\n        model.globalState.turnsUntilCrushEnters -= 1;\n      },\n      content: \"You catch up with Megan. She tells you about a short story she wrote.\",\n      choices: ['#talk-to-someone']\n    },\n\n    {\n      id: 'marta', tags: ['talk-to-someone'],\n      optionText: \"Talk to Marta\",\n      getCanSee: function(model) { return !model.globalState.hasTalkedToMarta; },\n      enter: function(model) {\n        model.globalState.hasTalkedToMarta = true;\n        model.globalState.turnsUntilCrushEnters -= 1;\n      },\n      content: \"You catch up with Marta. She just beat her personal best deadlift.\",\n      choices: ['#talk-to-someone']\n    },\n\n    {\n      id: 'crush', tags: ['talk-to-someone'],\n      optionText: \"Your crush is here\",\n      priority: 1,\n      getCanSee: function(model) {\n        return model.globalState.turnsUntilCrushEnters <= 0;\n      },\n      content: `\n      You see your crush enter the party. You immediately forget how to speak.\n      You stammer uncontrollably, trying to excuse yourself while you escape\n      out the back door.\n\n      # The End\n      `\n    }\n\n  ]\n});\n```\n\n<div id=\"party-crush\" class=\"jg-headless\"></div>",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/steve/_d/libraries/jumbogrove/manual/tutorial_templates.md",
    "name": "./manual/tutorial_templates.md",
    "content": "# Templates\n\nA situation doesn't always have to have the same text every time the\nplayer sees it. You can use\n[Nunjucks template syntax](https://mozilla.github.io/nunjucks/templating.html)\nto do all kinds of cool stuff!\n\nThe Nunjucks documentation is pretty good, so this part of the tutorial\nwon't really dive into the ins and outs of writing templates, but there\nare a few interesting topics to cover:\n\n* Basic usage\n* Template context: what variables are accessible in templates?\n* Custom filters\n* How Jumbo Grove uses both Nunjucks and Markdown to render text\n* Advanced Markdown + CSS\n* How to use another template engine instead of Nunjucks\n\n## World's Simplest Puzzle\n\nHere's a quick demonstration of an if-statement that reads a value from\n`model.globalState`. The template context includes `model.globalState`\nfor convenience, so you can check it really easily.\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'simple-puzzle',\n  globalState: { hasPulledLever: false },\n  situations: [\n\n    { id: 'start',\n      optionText: 'OK',\n      content: `\n      You are standing in a room with a thick shag carpet and purple velvet walls.\n\n      {% if hasPulledLever %}\n      The north wall has opened up into a huge cavern.\n      {% else %}\n      There is a lever on the west wall.\n      {% endif %}\n      `,\n      choices: ['pull-lever']\n    },\n\n    { id: 'pull-lever',\n      optionText: 'Pull the lever',\n      getCanSee: function(model) { return !model.globalState.hasPulledLever; },\n      enter: function(model) {\n        model.globalState.hasPulledLever = true;\n      },\n      content: `\n        You pull the lever. A rumbling sound starts beneath your feet.\n      `,\n      choices: ['start']\n    },\n\n  ]\n})\n```\n\n<div id=\"simple-puzzle\" class=\"jg-headless\"></div>\n\n## Template Context\n\nThe *template context* is the set of variables accessible directly\nin a template.\n\n`model` and `ui` are always accessible in the template context,\nso this will always work:\n\n```js\n{% if model.globalState.someVar %}some text{% endif %}\n```\n\nHere's how the template context is created each time a template is rendered:\n\n* Add everything from `model.globalState`\n* Add `player`, if there is a player [character](../class/src/jg/character.js~Character.html)\n* Add everything you put in [ui.addTemplateGetters()](../class/src/jg/dataui.js~ui.html#instance-method-addTemplateGetters)\n* Add everything you put in [ui.addTemplateContext()](../class/src/jg/dataui.js~ui.html#instance-method-addTemplateContext)\n* Add `model` and `ui`\n\n## Custom Filters\n\nYou can add custom filters to templates using the `init` hook. This function\nis called as soon as Jumbo Grove has parsed your game.\n\nHere's an example of adding a `| yesNo` filter to boolean values, so you can\nwrite `{{ myVal|yesNo }}` to get a \"yes\" or \"no\" in your text instead of\n\"true\" or \"false\":\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'custom-filter-demo',\n  globalState: { isAwesome: true },\n  init: function(model, ui) {\n    ui.nunjucks.addFilter('yesNo', function(val) {\n      if (val) { return \"yes\"; } else { return \"no\"; }\n    });\n  },\n  situations: [\n    {\n      id: 'start',\n      // Am I awesome? YES!\n      content: \"Am I awesome? {{ isAwesome|yesNo|upper }}!\"\n    }\n  ]\n});\n```\n\n<div id=\"custom-filter-demo\" class=\"jg-headless\"></div>\n\nFor more on Nunjucks filters, [check out the Nunjucks docs.](https://mozilla.github.io/nunjucks/api.html#custom-filters)\n\n## With Markdown & Whitespace\n\nAny time you write the `content` for a situation, or the\n`navHeader` or `asideHeader`, text is processed like this:\n\n1. Remove left indentation\n2. Run Nunjucks\n3. Run MarkdownIt\n\nNormally this will have straightforward results. But you have to be\ncareful not to add indentation when you don't mean to, because Markdown\ntreats indented text as a code block if you use four or more spaces:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'whitespace-example-1',\n  situations: [\n    {\n      id: 'start',\n      content: `\n      Hello.\n\n      {% if true %}\n          This will show up as code!\n      {% endif %}\n\n      {% if true %}\n      This is a normal paragraph.\n      {% endif %}\n\n      {% if true %}\n        This only uses 2 spaces and is also a normal paragraph.\n      {% endif %}\n      `\n    }\n  ]\n});\n```\n\n<div id=\"whitespace-example-1\" class=\"jg-headless\"></div>\n\nYou can \"eat\" the whitespace before a `{%` or after a `%}` by adding a\ndash character (`{%-` / `-%}`):\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'whitespace-example-2',\n  situations: [\n    {\n      id: 'start',\n      content: `\n      Hey, my name is\n      {% if name == 'brad' -%}\n        Brad\n      {%- else -%}\n        Jeff\n      {%- endif %}.\n      `\n    }\n  ]\n});\n```\n\n<div id=\"whitespace-example-2\" class=\"jg-headless\"></div>\n\n## Adding CSS\n\nJumbo Grove makes games for web browsers. It would be a shame if you couldn't\ntake advantage of all those great web styling features. Fortunately,\nJumbo Grove includes a MarkdownIt extension called\n[markdown-it-attrs](https://www.npmjs.com/package/markdown-it-attrs),\nwhich lets you add CSS classes to things!\n\nYou can add additional MarkdownIt extensions in your `init` callback\nusing `ui.md`, a `MarkdownIt` instance.\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'markdown-it-attrs-demo',\n  situations: [\n    {\n      id: 'start',\n      content: `\n      The last word is **pink**{.demo-pink}! Use your browser's\n      inspector tool to look at the CSS on it.\n      `\n    }\n  ]\n});\n```\n\n<div id=\"markdown-it-attrs-demo\" class=\"jg-headless\"></div>\n\n## Template Comment Syntax\n\nBecause Nunjucks's comment syntax (`{# blah blah blah %}`) conflicts\nwith `markdown-it-attrs`'s HTML ID syntax (`{#some-id}`), Nunjucks is\nconfigured by default to use `{## blah blah blah ##}` for comments\n(two hashes instead of one on each side).\n\n## Changing Template Engines\n\nIt is possible to do this, but it is not in this guide because it\nshould only be done if you really, really know what you are doing.\n\n## Built-in Filters\n\n* `character|quality(qualityId)` formats the current value of a\n  character's quality. (See next guide for what that is.)\n* `character|qualityName(qualityId)` shows the `name` value of\n  the character's quality.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/steve/_d/libraries/jumbogrove/manual/tutorial_actions.md",
    "name": "./manual/tutorial_actions.md",
    "content": "# Actions\n\nIn this guide:\n\n* What are actions?\n* Writing your own actions\n* Built-in actions; snippets\n* Multiple actions in one link\n\n## What are actions?\n\nSo far, this manual has talked about **situations** and **choices**.\nThere has been a simple game loop: read a situation, make a decision,\nrepeat.\n\nBut we can do so much more with hypertext! **Actions** let you add\nsome nonlinearity and interactivity to your situations.\n\nIn Jumbo Grove, an action is when you write a link like this:\n\n```md\nBlah blah blah [link text](>action_name:action_argument)\n```\n\nYou add a link to your Markdown and have the link target start with `>`.\nWhen Jumbo Grove renders your text, it looks over the output to find\nspecially formatted links like this. (You may recall that you can do\nsomething similar with situation links, if you use `@`.)\n\nYou can add as many arguments as you want, or no arguments:\n\n```md\n[link text](>action_name)  <!-- no arguments -->\n[link text](>action_name:arg1:arg2)  <!-- two arguments arguments -->\n```\n\nWhen the user clicks the link, Jumbo Grove calls the *action function*\nyou define, or a built-in action.\n\nHere's a simple example. The player is in a gym and they can work out\non the various machines.\n\n<div id=\"workout\" class=\"jg-headless\"></div>\n\nHere's the source code for that example:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'workout',\n  init: function(model, ui) {\n    ui.nunjucks.addFilter('formatSwoleness', function(str) {\n      const n = parseInt(str, 10);\n      if (!n) return 'Do you even lift';\n      switch (n) {\n        case 1: return 'Average';\n        case 2: return 'Swole';\n        case 3: return 'Mad swole';\n        default: return 'Jacked';\n      }\n    });\n  },\n  globalState: {\n    swoleness: 0,\n  },\n  situations: [\n    {\n      id: 'start',\n      content: `\n      You are in Sgt. McBeefy's Gym for People Who Want To Get Strong, because you\n      want to get strong.\n\n      There are some [dumbbells](>workout:dumbbells).\n\n      There is a [leg press machine](>workout:leg_press).\n\n      There is a [pull-up bar](>workout:pull_ups).\n\n      There is a [squat rack](>workout:squat_rack).\n      `,\n      actions: {\n        // after 'model' and 'ui', function arguments come from\n        // the link in the original Markdown.\n        workout: function(model, ui, whichMachine) {\n          console.log(\"go\");\n          model.globalState.swoleness += 1;\n\n          switch (whichMachine) {\n            // You can write stuff to the end of the transcript manually with\n            // `ui.write()`. These strings include an extra `\\n`\n            // character because otherwise Jumbo Grove won't add a surrounding\n            // <p> tag.\n            case 'dumbbells':\n              ui.write(\"You lift some dumbbells.\\n\"); break;\n            case 'leg_press':\n              ui.write(\"You use the leg press.\\n\"); break;\n            case 'pull_ups':\n              ui.write(\"You use the pull-up bar.\\n\"); break;\n            case 'squat_rack':\n              ui.write(\"You do some squats.\\n\"); break;\n          }\n\n          ui.write(`\n          Your strength level is: **{{ swoleness|formatSwoleness }}**\n          `);\n\n          if (model.globalState.swoleness >= 4) {\n            ui.write(`\n            [Hit the showers](@end)\n            `);\n          }\n        }\n      }\n    },\n    {\n      id: 'end',\n      content: \"Congrats on getting jacked!\"\n    }\n  ]\n  \n});\n```\n\n## Built-in Actions\n\nThere is a popular kind of interactive fiction presentation where you\nclick links and they expand text or just write text to the end of the\ntranscript, or some specific point. Jumbo Grove has built-in actions\nfor all of these cases.\n\nHere is a quick example:\n\n<div id=\"woods\" class=\"jg-headless\"></div>\n\nHere's how it works:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'woods',\n  situations: [\n    {\n      id: 'start',\n      content: `\n      You are [standing](>replaceself:be_quiet) under a [tree](>write:hear_the_wind).\n\n      A *blue*{#make_the_bird_red} [bird](>replace:make_the_bird_red) sits on a\n      branch above you.\n      `,\n      snippets: {\n        // Snippets may contain more actions!\n        be_quiet: `standing [quietly](>replaceself:be_noisy)`,\n        be_noisy: `noisily`,\n        hear_the_wind: `\n          The wind rustles the leaves above your head.\n        `,\n        make_the_bird_red: `*red*`,\n      }\n    }\n  ]\n});\n```\n\nYou can get really fancy with these things. You could write a whole game with\njust one situation!\n\nThe built-in actions use the special `snippets` object. It's a mapping of IDs\nto Markdown templates.\n\nIt's OK to put action links, situation links, and template syntax\nin your snippets!\n\n### `write`\n\nThe `write` action appends a snippet to the transcript.\n\nIf you have some text like this:\n\n```md\nI am listening to [the wind](>write:hear_the_wind)\n```\n\nAnd a snippet like this:\n\n```js\nsnippets: {\n  hear_the_wind: \"The wind rustles the leaves.\"\n}\n```\n\nThen when you click the link, the link will turn into plain text,\nand the text \"The wind rustles the leaves\" will be added to the end\nof your content.\n\n### `replaceself`\n\nThe `replaceself` action replaces the link with the contents of a snippet.\nIf you have some text like this:\n\n```md\nDemo of [a snippet](>replaceself:be_cool)\n```\n\nand you have a snippet like this:\n\n```js\nsnippets: {\n  be_cool: \"a really cool snippet\"\n}\n```\n\nThen when you click the link \"a snippet\", it will be replaced with non-linked\ntext that says \"a really cool snippet\".\n\n### `replace`\n\nThis is a tricky one. The `replaceself` action replaces *the DOM element\nwith the same ID as the snippet*, with the contents of the snippet.\n\nSo if you have some text like this:\n\n```md\nThis paragraph will be replaced. {#replacement_example}\n\n[Replace the paragraph](>replace:replacement_example)\n```\n\nAnd a snippet like this:\n\n```js\nsnippets: {\n  replacement_example: \"This is the new text!\"\n}\n```\n\nThen when you click \"Replace the paragraph\", the first paragraph will be replaced\nwith the contents of the snippet.\n\nIn the Markdown part of the example, the `{#replacement_example}` part is what\nassigns the ID attribute to the paragraph element. For details about using this\nsyntax, read [the markdown-it-attrs docs.](https://www.npmjs.com/package/markdown-it-attrs)\n\n## Multiple Actions, One Link\n\nIt is possible to trigger multiple actions from one link. Just separate them\nwith a `;` character.\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'multi-action',\n  situations: [\n    {\n      id: 'start',\n      content: `\n      There is a [red](>replaceself:blue;>write:fly_away) bird here.\n      `,\n      snippets: {\n        blue: 'blue',\n        fly_away: `\n        It flies away.\n        `\n      }\n    }\n  ]\n});\n```\n\n<div id=\"multi-action\" class=\"jg-headless\"></div>\n\nYou can use this technique to save yourself having to write a lot of\ncustom action JavaScript if all you want to do is replace some text\nand go to another situation.\n\nHere's a rewrite of the gym example using this technique:\n\n<div id=\"workout-2\" class=\"jg-headless\"></div>\n\nSource:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'workout-2',\n  init: function(model, ui) {\n    ui.nunjucks.addFilter('formatSwoleness', function(str) {\n      const n = parseInt(str, 10);\n      if (!n) return 'Do you even lift';\n      switch (n) {\n        case 1: return 'Average';\n        case 2: return 'Swole';\n        case 3: return 'Mad swole';\n        default: return 'Jacked';\n      }\n    });\n  },\n  globalState: {\n    swoleness: 0,\n  },\n  situations: [\n    {\n      id: 'start',\n      content: `\n      You are in Sgt. McBeefy's Gym for People Who Want To Get Strong, because you\n      want to get strong.\n\n      There are some [dumbbells](>write:dumbbells;>show_progress).\n\n      There is a [leg press machine](>write:leg_press;>show_progress).\n\n      There is a [pull-up bar](>write:pull_ups;>show_progress).\n\n      There is a [squat rack](>write:squat_rack;>show_progress).\n      `,\n      snippets: {\n        dumbbells: \"You lift some dumbbells.\\n\",\n        leg_press: \"You use the leg press.\\n\",\n        pull_ups: \"You use the pull-up bar.\\n\",\n        squat_rack: \"You do some squats.\\n\"\n      },\n      actions: {\n        show_progress: function(model, ui) {\n          model.globalState.swoleness += 1;\n\n          // no more gross switch statement!\n\n          ui.write(`\n          Your strength level is: **{{ swoleness|formatSwoleness }}**\n          `);\n\n          if (model.globalState.swoleness >= 4) {\n            ui.write(`\n            [Hit the showers](@end)\n            `);\n          }\n        }\n      }\n    },\n    {\n      id: 'end',\n      content: \"Congrats on getting jacked!\"\n    }\n  ]\n  \n});\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/steve/_d/libraries/jumbogrove/manual/tutorial_characters.md",
    "name": "./manual/tutorial_characters.md",
    "content": "# Characters\n\nIn this guide:\n\n* What is a character?\n* What is a quality?\n* Working with characters and qualities\n\n## Characters and Qualities\n\nIt's possible to use only `model.globalState` to store your game's state,\nsometimes even desirable, but Jumbo Grove includes another way: *characters*.\n\nA character is a collection of *qualities*. A quality is a value (string,\nnumber, or boolean) with a human-readable name.\n\nAs an example, consider a game about a group's survival in a zombie apocalypse.\nHere's what each character's qualities would look like:\n\n* Integer value 1-10 representing hunger, displayed as one of these words:\n  (stuffed, full, satisfied, not hungry, a little hungry, very hungry,\n   super hungry, famished, ravenous, starving)\n* Boolean value for whether they are sleeping or not\n\nAll characters must be defined at the start of the game. It is not currently\npossible to add or remove characters.\n\nHere's a quick example of working with characters in a function:\n\n<div id=\"character-example\" class=\"jg-with-sidebar\"></div>\n\nHere's the code for the example:\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'character-example',\n  showAside: true,\n  asideHeader: \"Qualities:\",\n  showNav: true,\n  navHeader: \"Qualities: the game!\",\n  characters: [\n    {\n      // 'player' is a special character accessible at model.player\n      id: 'player',  \n      name: 'You',\n      // this is like globalState but just for this character.\n      state: {},  \n\n      qualities: {\n        // Qualities are always grouped.\n        main: {\n          name: 'Main',  // optional group heading\n          priority: 0,   // higher priority = higher in list\n          hidden: false, // default true; if false, not shown in sidebar\n          hunger: {\n            name: \"Hunger\",\n            type: 'wordScale',\n            words: [\n              'stuffed', 'full', 'satisfied', 'not hungry',\n              'a little hungry', 'very hungry', 'super hungry', 'famished',\n              'ravenous', 'starving'\n            ],\n            offset: -1,  // wordScale is 0-indexed, but value is 1-indexed, so\n                          // subtract 1 when looking up words\n            initialValue: 4,  // \"not hungry\"\n          }\n        }\n      }\n    }\n  ],\n\n  situations: [\n    {\n      id: 'start',\n      enter: function(model, ui) {\n        model.character('player').addToQuality('hunger', 1);\n        ui.write(`\n        After adding 1 to player hunger, player is now:\n        `);\n        ui.write(model.player.formatQuality('hunger'));\n      },\n      content: `\n        Quality name: {{ model.character('player')|qualityName('hunger') }}\n\n        Quality value: {{ model.character('player')|quality('hunger') }}\n      `,\n      choices: ['eat'],\n    },\n    {\n      id: 'eat',\n      enter: function(model, ui) {\n        model.character('player').addToQuality('hunger', -1);\n      },\n      content: `\n      Look at the sidebar; the value changed\n      `\n    }\n  ]\n});\n```\n\nSince this feature requires more JavaScript knowledge, this guide won't dig\nin to qualities, since you can probably figure it out from the API. Please\n[open a GitHub issue](https://github.com/irskep/jumbogrove/issues/new) if\nyou have trouble.\n\n## Character State\n\nYou can store whatever JSON-safe values you like on the `.state` attribute of\na character. These values are restored when you save and load.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/steve/_d/libraries/jumbogrove/manual/tutorial_saving.md",
    "name": "./manual/tutorial_saving.md",
    "content": "# Saving & Loading\n\nJumbo Grove games are saved to *browser local storage*. If you players\nuse Incognito Mode/Private Browsing, it won't work.\n\nThe game only saves when entering situations with `autosave: true`.\n\nWhen loading a game, the whole transcript is _not_ replayed. The game\npicks up where the player left off, without showing the whole history.\n\n## Version Numbers\n\nIn addition to an `id`, you should define a `version` for your game, because\nthe game's savefile location is based on the version number.\n\n## Resetting the Game\n\nThere is a special \n\n## Quick Example\n\nTry navigating to a new scene and reloading the page.\n\n<div id=\"save-example\" class=\"jg-with-sidebar\"></div>\n\n```js\njumbogrove.jumbogrove('#game', {\n  id: 'save-example',\n  showNav: true,\n  gameSaveMessage: '> Game saved.',\n  navHeader: `\n  ### A Game You Can Save\n\n  [Start over](>resetGame)\n  `,\n  situations: [\n    {\n      id: 'start',\n      autosave: true,\n      content: `\n      You are at START.\n      `,\n      choices: ['the-other-scene']\n    },\n    {\n      id: 'the-other-scene',\n      autosave: true,\n      content: `\n      You are at THE OTHER SCENE.\n      `,\n      choices: ['start']\n    }\n  ]\n};\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/steve/_d/libraries/jumbogrove/manual/tutorial_gamepad.md",
    "name": "./manual/tutorial_gamepad.md",
    "content": "# Gamepad Support\n\nIf a gamepad is detected with the HTML5 gamepad API, then the player\nwill be able to use it to navigate between links.\n\nIt doesn't really work on this documentation site because there are\nmultiple instances on most pages, but it should work fine if there's\njust one instance.",
    "static": true,
    "access": "public"
  }
]